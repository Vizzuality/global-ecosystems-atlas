/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 *  Global ecosystems atlas Tiler
 * OpenAPI spec version: 0.1.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import { API } from "../../services/api";
import type { ErrorType } from "../../services/api";

import type {
  ApiLocationsLocationGet200,
  HTTPValidationError,
  ResponseModelListLocation,
  ResponseModelListWidgetData,
} from "./strapi.schemas";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * Get all locations
 * @summary Api
 */
export const apiLocationsGet = (options?: SecondParameter<typeof API>, signal?: AbortSignal) => {
  return API<ResponseModelListLocation>({ url: `/locations`, method: "GET", signal }, options);
};

export const getApiLocationsGetQueryKey = () => {
  return [`/locations`] as const;
};

export const getApiLocationsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof apiLocationsGet>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof apiLocationsGet>>, TError, TData>>;
  request?: SecondParameter<typeof API>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getApiLocationsGetQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiLocationsGet>>> = ({ signal }) =>
    apiLocationsGet(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof apiLocationsGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ApiLocationsGetQueryResult = NonNullable<Awaited<ReturnType<typeof apiLocationsGet>>>;
export type ApiLocationsGetQueryError = ErrorType<unknown>;

export function useApiLocationsGet<
  TData = Awaited<ReturnType<typeof apiLocationsGet>>,
  TError = ErrorType<unknown>,
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof apiLocationsGet>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<Awaited<ReturnType<typeof apiLocationsGet>>, TError, TData>,
      "initialData"
    >;
  request?: SecondParameter<typeof API>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useApiLocationsGet<
  TData = Awaited<ReturnType<typeof apiLocationsGet>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof apiLocationsGet>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<Awaited<ReturnType<typeof apiLocationsGet>>, TError, TData>,
      "initialData"
    >;
  request?: SecondParameter<typeof API>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useApiLocationsGet<
  TData = Awaited<ReturnType<typeof apiLocationsGet>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof apiLocationsGet>>, TError, TData>>;
  request?: SecondParameter<typeof API>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Api
 */

export function useApiLocationsGet<
  TData = Awaited<ReturnType<typeof apiLocationsGet>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof apiLocationsGet>>, TError, TData>>;
  request?: SecondParameter<typeof API>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getApiLocationsGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get one location geometry
 * @summary Api
 */
export const apiLocationsLocationGet = (
  location: unknown,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<ApiLocationsLocationGet200>(
    { url: `/locations/${location}`, method: "GET", signal },
    options,
  );
};

export const getApiLocationsLocationGetQueryKey = (location: unknown) => {
  return [`/locations/${location}`] as const;
};

export const getApiLocationsLocationGetQueryOptions = <
  TData = Awaited<ReturnType<typeof apiLocationsLocationGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  location: unknown,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof apiLocationsLocationGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getApiLocationsLocationGetQueryKey(location);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiLocationsLocationGet>>> = ({
    signal,
  }) => apiLocationsLocationGet(location, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!location, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof apiLocationsLocationGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ApiLocationsLocationGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiLocationsLocationGet>>
>;
export type ApiLocationsLocationGetQueryError = ErrorType<HTTPValidationError>;

export function useApiLocationsLocationGet<
  TData = Awaited<ReturnType<typeof apiLocationsLocationGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  location: unknown,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof apiLocationsLocationGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiLocationsLocationGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof API>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useApiLocationsLocationGet<
  TData = Awaited<ReturnType<typeof apiLocationsLocationGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  location: unknown,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof apiLocationsLocationGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiLocationsLocationGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useApiLocationsLocationGet<
  TData = Awaited<ReturnType<typeof apiLocationsLocationGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  location: unknown,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof apiLocationsLocationGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Api
 */

export function useApiLocationsLocationGet<
  TData = Awaited<ReturnType<typeof apiLocationsLocationGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  location: unknown,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof apiLocationsLocationGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getApiLocationsLocationGetQueryOptions(location, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get all map layer information
 * @summary Api
 */
export const apiLocationsLocationWidgetsWidgetIdGet = (
  location: unknown,
  widgetId: unknown,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<ResponseModelListWidgetData>(
    { url: `/locations/${location}/widgets/${widgetId}`, method: "GET", signal },
    options,
  );
};

export const getApiLocationsLocationWidgetsWidgetIdGetQueryKey = (
  location: unknown,
  widgetId: unknown,
) => {
  return [`/locations/${location}/widgets/${widgetId}`] as const;
};

export const getApiLocationsLocationWidgetsWidgetIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof apiLocationsLocationWidgetsWidgetIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  location: unknown,
  widgetId: unknown,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof apiLocationsLocationWidgetsWidgetIdGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getApiLocationsLocationWidgetsWidgetIdGetQueryKey(location, widgetId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof apiLocationsLocationWidgetsWidgetIdGet>>
  > = ({ signal }) =>
    apiLocationsLocationWidgetsWidgetIdGet(location, widgetId, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(location && widgetId),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof apiLocationsLocationWidgetsWidgetIdGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ApiLocationsLocationWidgetsWidgetIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiLocationsLocationWidgetsWidgetIdGet>>
>;
export type ApiLocationsLocationWidgetsWidgetIdGetQueryError = ErrorType<HTTPValidationError>;

export function useApiLocationsLocationWidgetsWidgetIdGet<
  TData = Awaited<ReturnType<typeof apiLocationsLocationWidgetsWidgetIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  location: unknown,
  widgetId: unknown,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof apiLocationsLocationWidgetsWidgetIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiLocationsLocationWidgetsWidgetIdGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof API>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useApiLocationsLocationWidgetsWidgetIdGet<
  TData = Awaited<ReturnType<typeof apiLocationsLocationWidgetsWidgetIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  location: unknown,
  widgetId: unknown,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof apiLocationsLocationWidgetsWidgetIdGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof apiLocationsLocationWidgetsWidgetIdGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useApiLocationsLocationWidgetsWidgetIdGet<
  TData = Awaited<ReturnType<typeof apiLocationsLocationWidgetsWidgetIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  location: unknown,
  widgetId: unknown,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof apiLocationsLocationWidgetsWidgetIdGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Api
 */

export function useApiLocationsLocationWidgetsWidgetIdGet<
  TData = Awaited<ReturnType<typeof apiLocationsLocationWidgetsWidgetIdGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  location: unknown,
  widgetId: unknown,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof apiLocationsLocationWidgetsWidgetIdGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getApiLocationsLocationWidgetsWidgetIdGetQueryOptions(
    location,
    widgetId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}
