/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 *  Global ecosystems atlas Tiler
 * OpenAPI spec version: 0.1.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import { API } from "../../services/api";
import type { ErrorType } from "../../services/api";

import type {
  HTTPValidationError,
  ImageType,
  Point,
  PointTilerPointLonLatGetParams,
  TileTilerTilesTileMatrixSetIdZXYFormatGetParams,
  TileTilerTilesTileMatrixSetIdZXYGetParams,
  TileTilerTilesTileMatrixSetIdZXYScaleXFormatGetParams,
  TileTilerTilesTileMatrixSetIdZXYScaleXGetParams,
  TileTilerTilesZXYFormatGetParams,
  TileTilerTilesZXYGetParams,
  TileTilerTilesZXYScaleXFormatGetParams,
  TileTilerTilesZXYScaleXGetParams,
} from "./strapi.schemas";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * Create map tile from a dataset.
 * @summary Tile
 */
export const tileTilerTilesTileMatrixSetIdZXYScaleXFormatGet = (
  tileMatrixSetId:
    | "CDB1GlobalGrid"
    | "CanadianNAD83_LCC"
    | "EuropeanETRS89_LAEAQuad"
    | "GNOSISGlobalGrid"
    | "LINZAntarticaMapTilegrid"
    | "NZTM2000Quad"
    | "UPSAntarcticWGS84Quad"
    | "UPSArcticWGS84Quad"
    | "UTM31WGS84Quad"
    | "WGS1984Quad"
    | "WebMercatorQuad"
    | "WorldCRS84Quad"
    | "WorldMercatorWGS84Quad",
  z: number,
  x: number,
  y: number,
  scale: number,
  format: ImageType,
  params: TileTilerTilesTileMatrixSetIdZXYScaleXFormatGetParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<unknown>(
    {
      url: `/tiler/tiles/${tileMatrixSetId}/${z}/${x}/${y}@${scale}x.${format}`,
      method: "GET",
      params,
      signal,
    },
    options,
  );
};

export const getTileTilerTilesTileMatrixSetIdZXYScaleXFormatGetQueryKey = (
  tileMatrixSetId:
    | "CDB1GlobalGrid"
    | "CanadianNAD83_LCC"
    | "EuropeanETRS89_LAEAQuad"
    | "GNOSISGlobalGrid"
    | "LINZAntarticaMapTilegrid"
    | "NZTM2000Quad"
    | "UPSAntarcticWGS84Quad"
    | "UPSArcticWGS84Quad"
    | "UTM31WGS84Quad"
    | "WGS1984Quad"
    | "WebMercatorQuad"
    | "WorldCRS84Quad"
    | "WorldMercatorWGS84Quad",
  z: number,
  x: number,
  y: number,
  scale: number,
  format: ImageType,
  params: TileTilerTilesTileMatrixSetIdZXYScaleXFormatGetParams,
) => {
  return [
    `/tiler/tiles/${tileMatrixSetId}/${z}/${x}/${y}@${scale}x.${format}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getTileTilerTilesTileMatrixSetIdZXYScaleXFormatGetQueryOptions = <
  TData = Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYScaleXFormatGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  tileMatrixSetId:
    | "CDB1GlobalGrid"
    | "CanadianNAD83_LCC"
    | "EuropeanETRS89_LAEAQuad"
    | "GNOSISGlobalGrid"
    | "LINZAntarticaMapTilegrid"
    | "NZTM2000Quad"
    | "UPSAntarcticWGS84Quad"
    | "UPSArcticWGS84Quad"
    | "UTM31WGS84Quad"
    | "WGS1984Quad"
    | "WebMercatorQuad"
    | "WorldCRS84Quad"
    | "WorldMercatorWGS84Quad",
  z: number,
  x: number,
  y: number,
  scale: number,
  format: ImageType,
  params: TileTilerTilesTileMatrixSetIdZXYScaleXFormatGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYScaleXFormatGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getTileTilerTilesTileMatrixSetIdZXYScaleXFormatGetQueryKey(
      tileMatrixSetId,
      z,
      x,
      y,
      scale,
      format,
      params,
    );

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYScaleXFormatGet>>
  > = ({ signal }) =>
    tileTilerTilesTileMatrixSetIdZXYScaleXFormatGet(
      tileMatrixSetId,
      z,
      x,
      y,
      scale,
      format,
      params,
      requestOptions,
      signal,
    );

  return {
    queryKey,
    queryFn,
    enabled: !!(tileMatrixSetId && z && x && y && scale && format),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYScaleXFormatGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TileTilerTilesTileMatrixSetIdZXYScaleXFormatGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYScaleXFormatGet>>
>;
export type TileTilerTilesTileMatrixSetIdZXYScaleXFormatGetQueryError =
  ErrorType<HTTPValidationError>;

export function useTileTilerTilesTileMatrixSetIdZXYScaleXFormatGet<
  TData = Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYScaleXFormatGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  tileMatrixSetId:
    | "CDB1GlobalGrid"
    | "CanadianNAD83_LCC"
    | "EuropeanETRS89_LAEAQuad"
    | "GNOSISGlobalGrid"
    | "LINZAntarticaMapTilegrid"
    | "NZTM2000Quad"
    | "UPSAntarcticWGS84Quad"
    | "UPSArcticWGS84Quad"
    | "UTM31WGS84Quad"
    | "WGS1984Quad"
    | "WebMercatorQuad"
    | "WorldCRS84Quad"
    | "WorldMercatorWGS84Quad",
  z: number,
  x: number,
  y: number,
  scale: number,
  format: ImageType,
  params: TileTilerTilesTileMatrixSetIdZXYScaleXFormatGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYScaleXFormatGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYScaleXFormatGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof API>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTileTilerTilesTileMatrixSetIdZXYScaleXFormatGet<
  TData = Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYScaleXFormatGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  tileMatrixSetId:
    | "CDB1GlobalGrid"
    | "CanadianNAD83_LCC"
    | "EuropeanETRS89_LAEAQuad"
    | "GNOSISGlobalGrid"
    | "LINZAntarticaMapTilegrid"
    | "NZTM2000Quad"
    | "UPSAntarcticWGS84Quad"
    | "UPSArcticWGS84Quad"
    | "UTM31WGS84Quad"
    | "WGS1984Quad"
    | "WebMercatorQuad"
    | "WorldCRS84Quad"
    | "WorldMercatorWGS84Quad",
  z: number,
  x: number,
  y: number,
  scale: number,
  format: ImageType,
  params: TileTilerTilesTileMatrixSetIdZXYScaleXFormatGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYScaleXFormatGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYScaleXFormatGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTileTilerTilesTileMatrixSetIdZXYScaleXFormatGet<
  TData = Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYScaleXFormatGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  tileMatrixSetId:
    | "CDB1GlobalGrid"
    | "CanadianNAD83_LCC"
    | "EuropeanETRS89_LAEAQuad"
    | "GNOSISGlobalGrid"
    | "LINZAntarticaMapTilegrid"
    | "NZTM2000Quad"
    | "UPSAntarcticWGS84Quad"
    | "UPSArcticWGS84Quad"
    | "UTM31WGS84Quad"
    | "WGS1984Quad"
    | "WebMercatorQuad"
    | "WorldCRS84Quad"
    | "WorldMercatorWGS84Quad",
  z: number,
  x: number,
  y: number,
  scale: number,
  format: ImageType,
  params: TileTilerTilesTileMatrixSetIdZXYScaleXFormatGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYScaleXFormatGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Tile
 */

export function useTileTilerTilesTileMatrixSetIdZXYScaleXFormatGet<
  TData = Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYScaleXFormatGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  tileMatrixSetId:
    | "CDB1GlobalGrid"
    | "CanadianNAD83_LCC"
    | "EuropeanETRS89_LAEAQuad"
    | "GNOSISGlobalGrid"
    | "LINZAntarticaMapTilegrid"
    | "NZTM2000Quad"
    | "UPSAntarcticWGS84Quad"
    | "UPSArcticWGS84Quad"
    | "UTM31WGS84Quad"
    | "WGS1984Quad"
    | "WebMercatorQuad"
    | "WorldCRS84Quad"
    | "WorldMercatorWGS84Quad",
  z: number,
  x: number,
  y: number,
  scale: number,
  format: ImageType,
  params: TileTilerTilesTileMatrixSetIdZXYScaleXFormatGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYScaleXFormatGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTileTilerTilesTileMatrixSetIdZXYScaleXFormatGetQueryOptions(
    tileMatrixSetId,
    z,
    x,
    y,
    scale,
    format,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create map tile from a dataset.
 * @summary Tile
 */
export const tileTilerTilesTileMatrixSetIdZXYScaleXGet = (
  tileMatrixSetId:
    | "CDB1GlobalGrid"
    | "CanadianNAD83_LCC"
    | "EuropeanETRS89_LAEAQuad"
    | "GNOSISGlobalGrid"
    | "LINZAntarticaMapTilegrid"
    | "NZTM2000Quad"
    | "UPSAntarcticWGS84Quad"
    | "UPSArcticWGS84Quad"
    | "UTM31WGS84Quad"
    | "WGS1984Quad"
    | "WebMercatorQuad"
    | "WorldCRS84Quad"
    | "WorldMercatorWGS84Quad",
  z: number,
  x: number,
  y: number,
  scale: number,
  params: TileTilerTilesTileMatrixSetIdZXYScaleXGetParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<unknown>(
    {
      url: `/tiler/tiles/${tileMatrixSetId}/${z}/${x}/${y}@${scale}x`,
      method: "GET",
      params,
      signal,
    },
    options,
  );
};

export const getTileTilerTilesTileMatrixSetIdZXYScaleXGetQueryKey = (
  tileMatrixSetId:
    | "CDB1GlobalGrid"
    | "CanadianNAD83_LCC"
    | "EuropeanETRS89_LAEAQuad"
    | "GNOSISGlobalGrid"
    | "LINZAntarticaMapTilegrid"
    | "NZTM2000Quad"
    | "UPSAntarcticWGS84Quad"
    | "UPSArcticWGS84Quad"
    | "UTM31WGS84Quad"
    | "WGS1984Quad"
    | "WebMercatorQuad"
    | "WorldCRS84Quad"
    | "WorldMercatorWGS84Quad",
  z: number,
  x: number,
  y: number,
  scale: number,
  params: TileTilerTilesTileMatrixSetIdZXYScaleXGetParams,
) => {
  return [
    `/tiler/tiles/${tileMatrixSetId}/${z}/${x}/${y}@${scale}x`,
    ...(params ? [params] : []),
  ] as const;
};

export const getTileTilerTilesTileMatrixSetIdZXYScaleXGetQueryOptions = <
  TData = Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYScaleXGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  tileMatrixSetId:
    | "CDB1GlobalGrid"
    | "CanadianNAD83_LCC"
    | "EuropeanETRS89_LAEAQuad"
    | "GNOSISGlobalGrid"
    | "LINZAntarticaMapTilegrid"
    | "NZTM2000Quad"
    | "UPSAntarcticWGS84Quad"
    | "UPSArcticWGS84Quad"
    | "UTM31WGS84Quad"
    | "WGS1984Quad"
    | "WebMercatorQuad"
    | "WorldCRS84Quad"
    | "WorldMercatorWGS84Quad",
  z: number,
  x: number,
  y: number,
  scale: number,
  params: TileTilerTilesTileMatrixSetIdZXYScaleXGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYScaleXGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getTileTilerTilesTileMatrixSetIdZXYScaleXGetQueryKey(tileMatrixSetId, z, x, y, scale, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYScaleXGet>>
  > = ({ signal }) =>
    tileTilerTilesTileMatrixSetIdZXYScaleXGet(
      tileMatrixSetId,
      z,
      x,
      y,
      scale,
      params,
      requestOptions,
      signal,
    );

  return {
    queryKey,
    queryFn,
    enabled: !!(tileMatrixSetId && z && x && y && scale),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYScaleXGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TileTilerTilesTileMatrixSetIdZXYScaleXGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYScaleXGet>>
>;
export type TileTilerTilesTileMatrixSetIdZXYScaleXGetQueryError = ErrorType<HTTPValidationError>;

export function useTileTilerTilesTileMatrixSetIdZXYScaleXGet<
  TData = Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYScaleXGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  tileMatrixSetId:
    | "CDB1GlobalGrid"
    | "CanadianNAD83_LCC"
    | "EuropeanETRS89_LAEAQuad"
    | "GNOSISGlobalGrid"
    | "LINZAntarticaMapTilegrid"
    | "NZTM2000Quad"
    | "UPSAntarcticWGS84Quad"
    | "UPSArcticWGS84Quad"
    | "UTM31WGS84Quad"
    | "WGS1984Quad"
    | "WebMercatorQuad"
    | "WorldCRS84Quad"
    | "WorldMercatorWGS84Quad",
  z: number,
  x: number,
  y: number,
  scale: number,
  params: TileTilerTilesTileMatrixSetIdZXYScaleXGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYScaleXGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYScaleXGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof API>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTileTilerTilesTileMatrixSetIdZXYScaleXGet<
  TData = Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYScaleXGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  tileMatrixSetId:
    | "CDB1GlobalGrid"
    | "CanadianNAD83_LCC"
    | "EuropeanETRS89_LAEAQuad"
    | "GNOSISGlobalGrid"
    | "LINZAntarticaMapTilegrid"
    | "NZTM2000Quad"
    | "UPSAntarcticWGS84Quad"
    | "UPSArcticWGS84Quad"
    | "UTM31WGS84Quad"
    | "WGS1984Quad"
    | "WebMercatorQuad"
    | "WorldCRS84Quad"
    | "WorldMercatorWGS84Quad",
  z: number,
  x: number,
  y: number,
  scale: number,
  params: TileTilerTilesTileMatrixSetIdZXYScaleXGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYScaleXGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYScaleXGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTileTilerTilesTileMatrixSetIdZXYScaleXGet<
  TData = Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYScaleXGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  tileMatrixSetId:
    | "CDB1GlobalGrid"
    | "CanadianNAD83_LCC"
    | "EuropeanETRS89_LAEAQuad"
    | "GNOSISGlobalGrid"
    | "LINZAntarticaMapTilegrid"
    | "NZTM2000Quad"
    | "UPSAntarcticWGS84Quad"
    | "UPSArcticWGS84Quad"
    | "UTM31WGS84Quad"
    | "WGS1984Quad"
    | "WebMercatorQuad"
    | "WorldCRS84Quad"
    | "WorldMercatorWGS84Quad",
  z: number,
  x: number,
  y: number,
  scale: number,
  params: TileTilerTilesTileMatrixSetIdZXYScaleXGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYScaleXGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Tile
 */

export function useTileTilerTilesTileMatrixSetIdZXYScaleXGet<
  TData = Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYScaleXGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  tileMatrixSetId:
    | "CDB1GlobalGrid"
    | "CanadianNAD83_LCC"
    | "EuropeanETRS89_LAEAQuad"
    | "GNOSISGlobalGrid"
    | "LINZAntarticaMapTilegrid"
    | "NZTM2000Quad"
    | "UPSAntarcticWGS84Quad"
    | "UPSArcticWGS84Quad"
    | "UTM31WGS84Quad"
    | "WGS1984Quad"
    | "WebMercatorQuad"
    | "WorldCRS84Quad"
    | "WorldMercatorWGS84Quad",
  z: number,
  x: number,
  y: number,
  scale: number,
  params: TileTilerTilesTileMatrixSetIdZXYScaleXGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYScaleXGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTileTilerTilesTileMatrixSetIdZXYScaleXGetQueryOptions(
    tileMatrixSetId,
    z,
    x,
    y,
    scale,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create map tile from a dataset.
 * @summary Tile
 */
export const tileTilerTilesTileMatrixSetIdZXYFormatGet = (
  tileMatrixSetId:
    | "CDB1GlobalGrid"
    | "CanadianNAD83_LCC"
    | "EuropeanETRS89_LAEAQuad"
    | "GNOSISGlobalGrid"
    | "LINZAntarticaMapTilegrid"
    | "NZTM2000Quad"
    | "UPSAntarcticWGS84Quad"
    | "UPSArcticWGS84Quad"
    | "UTM31WGS84Quad"
    | "WGS1984Quad"
    | "WebMercatorQuad"
    | "WorldCRS84Quad"
    | "WorldMercatorWGS84Quad",
  z: number,
  x: number,
  y: number,
  format: ImageType,
  params: TileTilerTilesTileMatrixSetIdZXYFormatGetParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<unknown>(
    {
      url: `/tiler/tiles/${tileMatrixSetId}/${z}/${x}/${y}.${format}`,
      method: "GET",
      params,
      signal,
    },
    options,
  );
};

export const getTileTilerTilesTileMatrixSetIdZXYFormatGetQueryKey = (
  tileMatrixSetId:
    | "CDB1GlobalGrid"
    | "CanadianNAD83_LCC"
    | "EuropeanETRS89_LAEAQuad"
    | "GNOSISGlobalGrid"
    | "LINZAntarticaMapTilegrid"
    | "NZTM2000Quad"
    | "UPSAntarcticWGS84Quad"
    | "UPSArcticWGS84Quad"
    | "UTM31WGS84Quad"
    | "WGS1984Quad"
    | "WebMercatorQuad"
    | "WorldCRS84Quad"
    | "WorldMercatorWGS84Quad",
  z: number,
  x: number,
  y: number,
  format: ImageType,
  params: TileTilerTilesTileMatrixSetIdZXYFormatGetParams,
) => {
  return [
    `/tiler/tiles/${tileMatrixSetId}/${z}/${x}/${y}.${format}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getTileTilerTilesTileMatrixSetIdZXYFormatGetQueryOptions = <
  TData = Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYFormatGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  tileMatrixSetId:
    | "CDB1GlobalGrid"
    | "CanadianNAD83_LCC"
    | "EuropeanETRS89_LAEAQuad"
    | "GNOSISGlobalGrid"
    | "LINZAntarticaMapTilegrid"
    | "NZTM2000Quad"
    | "UPSAntarcticWGS84Quad"
    | "UPSArcticWGS84Quad"
    | "UTM31WGS84Quad"
    | "WGS1984Quad"
    | "WebMercatorQuad"
    | "WorldCRS84Quad"
    | "WorldMercatorWGS84Quad",
  z: number,
  x: number,
  y: number,
  format: ImageType,
  params: TileTilerTilesTileMatrixSetIdZXYFormatGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYFormatGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getTileTilerTilesTileMatrixSetIdZXYFormatGetQueryKey(tileMatrixSetId, z, x, y, format, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYFormatGet>>
  > = ({ signal }) =>
    tileTilerTilesTileMatrixSetIdZXYFormatGet(
      tileMatrixSetId,
      z,
      x,
      y,
      format,
      params,
      requestOptions,
      signal,
    );

  return {
    queryKey,
    queryFn,
    enabled: !!(tileMatrixSetId && z && x && y && format),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYFormatGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TileTilerTilesTileMatrixSetIdZXYFormatGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYFormatGet>>
>;
export type TileTilerTilesTileMatrixSetIdZXYFormatGetQueryError = ErrorType<HTTPValidationError>;

export function useTileTilerTilesTileMatrixSetIdZXYFormatGet<
  TData = Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYFormatGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  tileMatrixSetId:
    | "CDB1GlobalGrid"
    | "CanadianNAD83_LCC"
    | "EuropeanETRS89_LAEAQuad"
    | "GNOSISGlobalGrid"
    | "LINZAntarticaMapTilegrid"
    | "NZTM2000Quad"
    | "UPSAntarcticWGS84Quad"
    | "UPSArcticWGS84Quad"
    | "UTM31WGS84Quad"
    | "WGS1984Quad"
    | "WebMercatorQuad"
    | "WorldCRS84Quad"
    | "WorldMercatorWGS84Quad",
  z: number,
  x: number,
  y: number,
  format: ImageType,
  params: TileTilerTilesTileMatrixSetIdZXYFormatGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYFormatGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYFormatGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof API>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTileTilerTilesTileMatrixSetIdZXYFormatGet<
  TData = Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYFormatGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  tileMatrixSetId:
    | "CDB1GlobalGrid"
    | "CanadianNAD83_LCC"
    | "EuropeanETRS89_LAEAQuad"
    | "GNOSISGlobalGrid"
    | "LINZAntarticaMapTilegrid"
    | "NZTM2000Quad"
    | "UPSAntarcticWGS84Quad"
    | "UPSArcticWGS84Quad"
    | "UTM31WGS84Quad"
    | "WGS1984Quad"
    | "WebMercatorQuad"
    | "WorldCRS84Quad"
    | "WorldMercatorWGS84Quad",
  z: number,
  x: number,
  y: number,
  format: ImageType,
  params: TileTilerTilesTileMatrixSetIdZXYFormatGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYFormatGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYFormatGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTileTilerTilesTileMatrixSetIdZXYFormatGet<
  TData = Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYFormatGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  tileMatrixSetId:
    | "CDB1GlobalGrid"
    | "CanadianNAD83_LCC"
    | "EuropeanETRS89_LAEAQuad"
    | "GNOSISGlobalGrid"
    | "LINZAntarticaMapTilegrid"
    | "NZTM2000Quad"
    | "UPSAntarcticWGS84Quad"
    | "UPSArcticWGS84Quad"
    | "UTM31WGS84Quad"
    | "WGS1984Quad"
    | "WebMercatorQuad"
    | "WorldCRS84Quad"
    | "WorldMercatorWGS84Quad",
  z: number,
  x: number,
  y: number,
  format: ImageType,
  params: TileTilerTilesTileMatrixSetIdZXYFormatGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYFormatGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Tile
 */

export function useTileTilerTilesTileMatrixSetIdZXYFormatGet<
  TData = Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYFormatGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  tileMatrixSetId:
    | "CDB1GlobalGrid"
    | "CanadianNAD83_LCC"
    | "EuropeanETRS89_LAEAQuad"
    | "GNOSISGlobalGrid"
    | "LINZAntarticaMapTilegrid"
    | "NZTM2000Quad"
    | "UPSAntarcticWGS84Quad"
    | "UPSArcticWGS84Quad"
    | "UTM31WGS84Quad"
    | "WGS1984Quad"
    | "WebMercatorQuad"
    | "WorldCRS84Quad"
    | "WorldMercatorWGS84Quad",
  z: number,
  x: number,
  y: number,
  format: ImageType,
  params: TileTilerTilesTileMatrixSetIdZXYFormatGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYFormatGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTileTilerTilesTileMatrixSetIdZXYFormatGetQueryOptions(
    tileMatrixSetId,
    z,
    x,
    y,
    format,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create map tile from a dataset.
 * @summary Tile
 */
export const tileTilerTilesTileMatrixSetIdZXYGet = (
  tileMatrixSetId:
    | "CDB1GlobalGrid"
    | "CanadianNAD83_LCC"
    | "EuropeanETRS89_LAEAQuad"
    | "GNOSISGlobalGrid"
    | "LINZAntarticaMapTilegrid"
    | "NZTM2000Quad"
    | "UPSAntarcticWGS84Quad"
    | "UPSArcticWGS84Quad"
    | "UTM31WGS84Quad"
    | "WGS1984Quad"
    | "WebMercatorQuad"
    | "WorldCRS84Quad"
    | "WorldMercatorWGS84Quad",
  z: number,
  x: number,
  y: number,
  params: TileTilerTilesTileMatrixSetIdZXYGetParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<unknown>(
    { url: `/tiler/tiles/${tileMatrixSetId}/${z}/${x}/${y}`, method: "GET", params, signal },
    options,
  );
};

export const getTileTilerTilesTileMatrixSetIdZXYGetQueryKey = (
  tileMatrixSetId:
    | "CDB1GlobalGrid"
    | "CanadianNAD83_LCC"
    | "EuropeanETRS89_LAEAQuad"
    | "GNOSISGlobalGrid"
    | "LINZAntarticaMapTilegrid"
    | "NZTM2000Quad"
    | "UPSAntarcticWGS84Quad"
    | "UPSArcticWGS84Quad"
    | "UTM31WGS84Quad"
    | "WGS1984Quad"
    | "WebMercatorQuad"
    | "WorldCRS84Quad"
    | "WorldMercatorWGS84Quad",
  z: number,
  x: number,
  y: number,
  params: TileTilerTilesTileMatrixSetIdZXYGetParams,
) => {
  return [`/tiler/tiles/${tileMatrixSetId}/${z}/${x}/${y}`, ...(params ? [params] : [])] as const;
};

export const getTileTilerTilesTileMatrixSetIdZXYGetQueryOptions = <
  TData = Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  tileMatrixSetId:
    | "CDB1GlobalGrid"
    | "CanadianNAD83_LCC"
    | "EuropeanETRS89_LAEAQuad"
    | "GNOSISGlobalGrid"
    | "LINZAntarticaMapTilegrid"
    | "NZTM2000Quad"
    | "UPSAntarcticWGS84Quad"
    | "UPSArcticWGS84Quad"
    | "UTM31WGS84Quad"
    | "WGS1984Quad"
    | "WebMercatorQuad"
    | "WorldCRS84Quad"
    | "WorldMercatorWGS84Quad",
  z: number,
  x: number,
  y: number,
  params: TileTilerTilesTileMatrixSetIdZXYGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getTileTilerTilesTileMatrixSetIdZXYGetQueryKey(tileMatrixSetId, z, x, y, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYGet>>> = ({
    signal,
  }) =>
    tileTilerTilesTileMatrixSetIdZXYGet(tileMatrixSetId, z, x, y, params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(tileMatrixSetId && z && x && y),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TileTilerTilesTileMatrixSetIdZXYGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYGet>>
>;
export type TileTilerTilesTileMatrixSetIdZXYGetQueryError = ErrorType<HTTPValidationError>;

export function useTileTilerTilesTileMatrixSetIdZXYGet<
  TData = Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  tileMatrixSetId:
    | "CDB1GlobalGrid"
    | "CanadianNAD83_LCC"
    | "EuropeanETRS89_LAEAQuad"
    | "GNOSISGlobalGrid"
    | "LINZAntarticaMapTilegrid"
    | "NZTM2000Quad"
    | "UPSAntarcticWGS84Quad"
    | "UPSArcticWGS84Quad"
    | "UTM31WGS84Quad"
    | "WGS1984Quad"
    | "WebMercatorQuad"
    | "WorldCRS84Quad"
    | "WorldMercatorWGS84Quad",
  z: number,
  x: number,
  y: number,
  params: TileTilerTilesTileMatrixSetIdZXYGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof API>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTileTilerTilesTileMatrixSetIdZXYGet<
  TData = Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  tileMatrixSetId:
    | "CDB1GlobalGrid"
    | "CanadianNAD83_LCC"
    | "EuropeanETRS89_LAEAQuad"
    | "GNOSISGlobalGrid"
    | "LINZAntarticaMapTilegrid"
    | "NZTM2000Quad"
    | "UPSAntarcticWGS84Quad"
    | "UPSArcticWGS84Quad"
    | "UTM31WGS84Quad"
    | "WGS1984Quad"
    | "WebMercatorQuad"
    | "WorldCRS84Quad"
    | "WorldMercatorWGS84Quad",
  z: number,
  x: number,
  y: number,
  params: TileTilerTilesTileMatrixSetIdZXYGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTileTilerTilesTileMatrixSetIdZXYGet<
  TData = Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  tileMatrixSetId:
    | "CDB1GlobalGrid"
    | "CanadianNAD83_LCC"
    | "EuropeanETRS89_LAEAQuad"
    | "GNOSISGlobalGrid"
    | "LINZAntarticaMapTilegrid"
    | "NZTM2000Quad"
    | "UPSAntarcticWGS84Quad"
    | "UPSArcticWGS84Quad"
    | "UTM31WGS84Quad"
    | "WGS1984Quad"
    | "WebMercatorQuad"
    | "WorldCRS84Quad"
    | "WorldMercatorWGS84Quad",
  z: number,
  x: number,
  y: number,
  params: TileTilerTilesTileMatrixSetIdZXYGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Tile
 */

export function useTileTilerTilesTileMatrixSetIdZXYGet<
  TData = Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  tileMatrixSetId:
    | "CDB1GlobalGrid"
    | "CanadianNAD83_LCC"
    | "EuropeanETRS89_LAEAQuad"
    | "GNOSISGlobalGrid"
    | "LINZAntarticaMapTilegrid"
    | "NZTM2000Quad"
    | "UPSAntarcticWGS84Quad"
    | "UPSArcticWGS84Quad"
    | "UTM31WGS84Quad"
    | "WGS1984Quad"
    | "WebMercatorQuad"
    | "WorldCRS84Quad"
    | "WorldMercatorWGS84Quad",
  z: number,
  x: number,
  y: number,
  params: TileTilerTilesTileMatrixSetIdZXYGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof tileTilerTilesTileMatrixSetIdZXYGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTileTilerTilesTileMatrixSetIdZXYGetQueryOptions(
    tileMatrixSetId,
    z,
    x,
    y,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create map tile from a dataset.
 * @deprecated
 * @summary Tile
 */
export const tileTilerTilesZXYScaleXFormatGet = (
  z: number,
  x: number,
  y: number,
  scale: number,
  format: ImageType,
  params: TileTilerTilesZXYScaleXFormatGetParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<unknown>(
    { url: `/tiler/tiles/${z}/${x}/${y}@${scale}x.${format}`, method: "GET", params, signal },
    options,
  );
};

export const getTileTilerTilesZXYScaleXFormatGetQueryKey = (
  z: number,
  x: number,
  y: number,
  scale: number,
  format: ImageType,
  params: TileTilerTilesZXYScaleXFormatGetParams,
) => {
  return [`/tiler/tiles/${z}/${x}/${y}@${scale}x.${format}`, ...(params ? [params] : [])] as const;
};

export const getTileTilerTilesZXYScaleXFormatGetQueryOptions = <
  TData = Awaited<ReturnType<typeof tileTilerTilesZXYScaleXFormatGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  z: number,
  x: number,
  y: number,
  scale: number,
  format: ImageType,
  params: TileTilerTilesZXYScaleXFormatGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof tileTilerTilesZXYScaleXFormatGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getTileTilerTilesZXYScaleXFormatGetQueryKey(z, x, y, scale, format, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof tileTilerTilesZXYScaleXFormatGet>>> = ({
    signal,
  }) => tileTilerTilesZXYScaleXFormatGet(z, x, y, scale, format, params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(z && x && y && scale && format),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof tileTilerTilesZXYScaleXFormatGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TileTilerTilesZXYScaleXFormatGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof tileTilerTilesZXYScaleXFormatGet>>
>;
export type TileTilerTilesZXYScaleXFormatGetQueryError = ErrorType<HTTPValidationError>;

export function useTileTilerTilesZXYScaleXFormatGet<
  TData = Awaited<ReturnType<typeof tileTilerTilesZXYScaleXFormatGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  z: number,
  x: number,
  y: number,
  scale: number,
  format: ImageType,
  params: TileTilerTilesZXYScaleXFormatGetParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof tileTilerTilesZXYScaleXFormatGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof tileTilerTilesZXYScaleXFormatGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof API>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTileTilerTilesZXYScaleXFormatGet<
  TData = Awaited<ReturnType<typeof tileTilerTilesZXYScaleXFormatGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  z: number,
  x: number,
  y: number,
  scale: number,
  format: ImageType,
  params: TileTilerTilesZXYScaleXFormatGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof tileTilerTilesZXYScaleXFormatGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof tileTilerTilesZXYScaleXFormatGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTileTilerTilesZXYScaleXFormatGet<
  TData = Awaited<ReturnType<typeof tileTilerTilesZXYScaleXFormatGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  z: number,
  x: number,
  y: number,
  scale: number,
  format: ImageType,
  params: TileTilerTilesZXYScaleXFormatGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof tileTilerTilesZXYScaleXFormatGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @deprecated
 * @summary Tile
 */

export function useTileTilerTilesZXYScaleXFormatGet<
  TData = Awaited<ReturnType<typeof tileTilerTilesZXYScaleXFormatGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  z: number,
  x: number,
  y: number,
  scale: number,
  format: ImageType,
  params: TileTilerTilesZXYScaleXFormatGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof tileTilerTilesZXYScaleXFormatGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTileTilerTilesZXYScaleXFormatGetQueryOptions(
    z,
    x,
    y,
    scale,
    format,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create map tile from a dataset.
 * @deprecated
 * @summary Tile
 */
export const tileTilerTilesZXYScaleXGet = (
  z: number,
  x: number,
  y: number,
  scale: number,
  params: TileTilerTilesZXYScaleXGetParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<unknown>(
    { url: `/tiler/tiles/${z}/${x}/${y}@${scale}x`, method: "GET", params, signal },
    options,
  );
};

export const getTileTilerTilesZXYScaleXGetQueryKey = (
  z: number,
  x: number,
  y: number,
  scale: number,
  params: TileTilerTilesZXYScaleXGetParams,
) => {
  return [`/tiler/tiles/${z}/${x}/${y}@${scale}x`, ...(params ? [params] : [])] as const;
};

export const getTileTilerTilesZXYScaleXGetQueryOptions = <
  TData = Awaited<ReturnType<typeof tileTilerTilesZXYScaleXGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  z: number,
  x: number,
  y: number,
  scale: number,
  params: TileTilerTilesZXYScaleXGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof tileTilerTilesZXYScaleXGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTileTilerTilesZXYScaleXGetQueryKey(z, x, y, scale, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof tileTilerTilesZXYScaleXGet>>> = ({
    signal,
  }) => tileTilerTilesZXYScaleXGet(z, x, y, scale, params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(z && x && y && scale),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof tileTilerTilesZXYScaleXGet>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type TileTilerTilesZXYScaleXGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof tileTilerTilesZXYScaleXGet>>
>;
export type TileTilerTilesZXYScaleXGetQueryError = ErrorType<HTTPValidationError>;

export function useTileTilerTilesZXYScaleXGet<
  TData = Awaited<ReturnType<typeof tileTilerTilesZXYScaleXGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  z: number,
  x: number,
  y: number,
  scale: number,
  params: TileTilerTilesZXYScaleXGetParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof tileTilerTilesZXYScaleXGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof tileTilerTilesZXYScaleXGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof API>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTileTilerTilesZXYScaleXGet<
  TData = Awaited<ReturnType<typeof tileTilerTilesZXYScaleXGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  z: number,
  x: number,
  y: number,
  scale: number,
  params: TileTilerTilesZXYScaleXGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof tileTilerTilesZXYScaleXGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof tileTilerTilesZXYScaleXGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTileTilerTilesZXYScaleXGet<
  TData = Awaited<ReturnType<typeof tileTilerTilesZXYScaleXGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  z: number,
  x: number,
  y: number,
  scale: number,
  params: TileTilerTilesZXYScaleXGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof tileTilerTilesZXYScaleXGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @deprecated
 * @summary Tile
 */

export function useTileTilerTilesZXYScaleXGet<
  TData = Awaited<ReturnType<typeof tileTilerTilesZXYScaleXGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  z: number,
  x: number,
  y: number,
  scale: number,
  params: TileTilerTilesZXYScaleXGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof tileTilerTilesZXYScaleXGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTileTilerTilesZXYScaleXGetQueryOptions(z, x, y, scale, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create map tile from a dataset.
 * @deprecated
 * @summary Tile
 */
export const tileTilerTilesZXYFormatGet = (
  z: number,
  x: number,
  y: number,
  format: ImageType,
  params: TileTilerTilesZXYFormatGetParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<unknown>(
    { url: `/tiler/tiles/${z}/${x}/${y}.${format}`, method: "GET", params, signal },
    options,
  );
};

export const getTileTilerTilesZXYFormatGetQueryKey = (
  z: number,
  x: number,
  y: number,
  format: ImageType,
  params: TileTilerTilesZXYFormatGetParams,
) => {
  return [`/tiler/tiles/${z}/${x}/${y}.${format}`, ...(params ? [params] : [])] as const;
};

export const getTileTilerTilesZXYFormatGetQueryOptions = <
  TData = Awaited<ReturnType<typeof tileTilerTilesZXYFormatGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  z: number,
  x: number,
  y: number,
  format: ImageType,
  params: TileTilerTilesZXYFormatGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof tileTilerTilesZXYFormatGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTileTilerTilesZXYFormatGetQueryKey(z, x, y, format, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof tileTilerTilesZXYFormatGet>>> = ({
    signal,
  }) => tileTilerTilesZXYFormatGet(z, x, y, format, params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(z && x && y && format),
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof tileTilerTilesZXYFormatGet>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type TileTilerTilesZXYFormatGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof tileTilerTilesZXYFormatGet>>
>;
export type TileTilerTilesZXYFormatGetQueryError = ErrorType<HTTPValidationError>;

export function useTileTilerTilesZXYFormatGet<
  TData = Awaited<ReturnType<typeof tileTilerTilesZXYFormatGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  z: number,
  x: number,
  y: number,
  format: ImageType,
  params: TileTilerTilesZXYFormatGetParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof tileTilerTilesZXYFormatGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof tileTilerTilesZXYFormatGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof API>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTileTilerTilesZXYFormatGet<
  TData = Awaited<ReturnType<typeof tileTilerTilesZXYFormatGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  z: number,
  x: number,
  y: number,
  format: ImageType,
  params: TileTilerTilesZXYFormatGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof tileTilerTilesZXYFormatGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof tileTilerTilesZXYFormatGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTileTilerTilesZXYFormatGet<
  TData = Awaited<ReturnType<typeof tileTilerTilesZXYFormatGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  z: number,
  x: number,
  y: number,
  format: ImageType,
  params: TileTilerTilesZXYFormatGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof tileTilerTilesZXYFormatGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @deprecated
 * @summary Tile
 */

export function useTileTilerTilesZXYFormatGet<
  TData = Awaited<ReturnType<typeof tileTilerTilesZXYFormatGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  z: number,
  x: number,
  y: number,
  format: ImageType,
  params: TileTilerTilesZXYFormatGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof tileTilerTilesZXYFormatGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTileTilerTilesZXYFormatGetQueryOptions(z, x, y, format, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create map tile from a dataset.
 * @deprecated
 * @summary Tile
 */
export const tileTilerTilesZXYGet = (
  z: number,
  x: number,
  y: number,
  params: TileTilerTilesZXYGetParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<unknown>(
    { url: `/tiler/tiles/${z}/${x}/${y}`, method: "GET", params, signal },
    options,
  );
};

export const getTileTilerTilesZXYGetQueryKey = (
  z: number,
  x: number,
  y: number,
  params: TileTilerTilesZXYGetParams,
) => {
  return [`/tiler/tiles/${z}/${x}/${y}`, ...(params ? [params] : [])] as const;
};

export const getTileTilerTilesZXYGetQueryOptions = <
  TData = Awaited<ReturnType<typeof tileTilerTilesZXYGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  z: number,
  x: number,
  y: number,
  params: TileTilerTilesZXYGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof tileTilerTilesZXYGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getTileTilerTilesZXYGetQueryKey(z, x, y, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof tileTilerTilesZXYGet>>> = ({ signal }) =>
    tileTilerTilesZXYGet(z, x, y, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!(z && x && y), ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof tileTilerTilesZXYGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TileTilerTilesZXYGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof tileTilerTilesZXYGet>>
>;
export type TileTilerTilesZXYGetQueryError = ErrorType<HTTPValidationError>;

export function useTileTilerTilesZXYGet<
  TData = Awaited<ReturnType<typeof tileTilerTilesZXYGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  z: number,
  x: number,
  y: number,
  params: TileTilerTilesZXYGetParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof tileTilerTilesZXYGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof tileTilerTilesZXYGet>>, TError, TData>,
        "initialData"
      >;
    request?: SecondParameter<typeof API>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTileTilerTilesZXYGet<
  TData = Awaited<ReturnType<typeof tileTilerTilesZXYGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  z: number,
  x: number,
  y: number,
  params: TileTilerTilesZXYGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof tileTilerTilesZXYGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof tileTilerTilesZXYGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTileTilerTilesZXYGet<
  TData = Awaited<ReturnType<typeof tileTilerTilesZXYGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  z: number,
  x: number,
  y: number,
  params: TileTilerTilesZXYGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof tileTilerTilesZXYGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @deprecated
 * @summary Tile
 */

export function useTileTilerTilesZXYGet<
  TData = Awaited<ReturnType<typeof tileTilerTilesZXYGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  z: number,
  x: number,
  y: number,
  params: TileTilerTilesZXYGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof tileTilerTilesZXYGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTileTilerTilesZXYGetQueryOptions(z, x, y, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get Point value for a dataset.
 * @summary Point
 */
export const pointTilerPointLonLatGet = (
  lon: number,
  lat: number,
  params: PointTilerPointLonLatGetParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<Point>({ url: `/tiler/point/${lon},${lat}`, method: "GET", params, signal }, options);
};

export const getPointTilerPointLonLatGetQueryKey = (
  lon: number,
  lat: number,
  params: PointTilerPointLonLatGetParams,
) => {
  return [`/tiler/point/${lon},${lat}`, ...(params ? [params] : [])] as const;
};

export const getPointTilerPointLonLatGetQueryOptions = <
  TData = Awaited<ReturnType<typeof pointTilerPointLonLatGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  lon: number,
  lat: number,
  params: PointTilerPointLonLatGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof pointTilerPointLonLatGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPointTilerPointLonLatGetQueryKey(lon, lat, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof pointTilerPointLonLatGet>>> = ({
    signal,
  }) => pointTilerPointLonLatGet(lon, lat, params, requestOptions, signal);

  return { queryKey, queryFn, enabled: !!(lon && lat), ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof pointTilerPointLonLatGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type PointTilerPointLonLatGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof pointTilerPointLonLatGet>>
>;
export type PointTilerPointLonLatGetQueryError = ErrorType<HTTPValidationError>;

export function usePointTilerPointLonLatGet<
  TData = Awaited<ReturnType<typeof pointTilerPointLonLatGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  lon: number,
  lat: number,
  params: PointTilerPointLonLatGetParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof pointTilerPointLonLatGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof pointTilerPointLonLatGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof API>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function usePointTilerPointLonLatGet<
  TData = Awaited<ReturnType<typeof pointTilerPointLonLatGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  lon: number,
  lat: number,
  params: PointTilerPointLonLatGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof pointTilerPointLonLatGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof pointTilerPointLonLatGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function usePointTilerPointLonLatGet<
  TData = Awaited<ReturnType<typeof pointTilerPointLonLatGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  lon: number,
  lat: number,
  params: PointTilerPointLonLatGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof pointTilerPointLonLatGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Point
 */

export function usePointTilerPointLonLatGet<
  TData = Awaited<ReturnType<typeof pointTilerPointLonLatGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  lon: number,
  lat: number,
  params: PointTilerPointLonLatGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof pointTilerPointLonLatGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getPointTilerPointLonLatGetQueryOptions(lon, lat, params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}
