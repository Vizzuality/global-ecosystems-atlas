/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 *  Global ecosystems atlas Tiler
 * OpenAPI spec version: 0.1.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import { API } from "../../services/api";
import type { ErrorType } from "../../services/api";

import type { ResponseModelListLayer } from "./strapi.schemas";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * Get all map layer information
 * @summary Api
 */
export const apiLayersGet = (options?: SecondParameter<typeof API>, signal?: AbortSignal) => {
  return API<ResponseModelListLayer>({ url: `/layers`, method: "GET", signal }, options);
};

export const getApiLayersGetQueryKey = () => {
  return [`/layers`] as const;
};

export const getApiLayersGetQueryOptions = <
  TData = Awaited<ReturnType<typeof apiLayersGet>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof apiLayersGet>>, TError, TData>>;
  request?: SecondParameter<typeof API>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getApiLayersGetQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiLayersGet>>> = ({ signal }) =>
    apiLayersGet(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof apiLayersGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type ApiLayersGetQueryResult = NonNullable<Awaited<ReturnType<typeof apiLayersGet>>>;
export type ApiLayersGetQueryError = ErrorType<unknown>;

export function useApiLayersGet<
  TData = Awaited<ReturnType<typeof apiLayersGet>>,
  TError = ErrorType<unknown>,
>(options: {
  query: Partial<UseQueryOptions<Awaited<ReturnType<typeof apiLayersGet>>, TError, TData>> &
    Pick<
      DefinedInitialDataOptions<Awaited<ReturnType<typeof apiLayersGet>>, TError, TData>,
      "initialData"
    >;
  request?: SecondParameter<typeof API>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useApiLayersGet<
  TData = Awaited<ReturnType<typeof apiLayersGet>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof apiLayersGet>>, TError, TData>> &
    Pick<
      UndefinedInitialDataOptions<Awaited<ReturnType<typeof apiLayersGet>>, TError, TData>,
      "initialData"
    >;
  request?: SecondParameter<typeof API>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useApiLayersGet<
  TData = Awaited<ReturnType<typeof apiLayersGet>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof apiLayersGet>>, TError, TData>>;
  request?: SecondParameter<typeof API>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Api
 */

export function useApiLayersGet<
  TData = Awaited<ReturnType<typeof apiLayersGet>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof apiLayersGet>>, TError, TData>>;
  request?: SecondParameter<typeof API>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getApiLayersGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}
