/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 *  Global ecosystems atlas Tiler
 * OpenAPI spec version: 0.1.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import { API } from "../../services/api";
import type { ErrorType } from "../../services/api";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * Get datasets
 * @summary Get Datasets
 */
export const getDatasetsDatasetsGet = (
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<unknown>({ url: `/datasets`, method: "GET", signal }, options);
};

export const getGetDatasetsDatasetsGetQueryKey = () => {
  return [`/datasets`] as const;
};

export const getGetDatasetsDatasetsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getDatasetsDatasetsGet>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getDatasetsDatasetsGet>>, TError, TData>
  >;
  request?: SecondParameter<typeof API>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDatasetsDatasetsGetQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getDatasetsDatasetsGet>>> = ({ signal }) =>
    getDatasetsDatasetsGet(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getDatasetsDatasetsGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetDatasetsDatasetsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDatasetsDatasetsGet>>
>;
export type GetDatasetsDatasetsGetQueryError = ErrorType<unknown>;

export function useGetDatasetsDatasetsGet<
  TData = Awaited<ReturnType<typeof getDatasetsDatasetsGet>>,
  TError = ErrorType<unknown>,
>(options: {
  query: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getDatasetsDatasetsGet>>, TError, TData>
  > &
    Pick<
      DefinedInitialDataOptions<Awaited<ReturnType<typeof getDatasetsDatasetsGet>>, TError, TData>,
      "initialData"
    >;
  request?: SecondParameter<typeof API>;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDatasetsDatasetsGet<
  TData = Awaited<ReturnType<typeof getDatasetsDatasetsGet>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getDatasetsDatasetsGet>>, TError, TData>
  > &
    Pick<
      UndefinedInitialDataOptions<
        Awaited<ReturnType<typeof getDatasetsDatasetsGet>>,
        TError,
        TData
      >,
      "initialData"
    >;
  request?: SecondParameter<typeof API>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetDatasetsDatasetsGet<
  TData = Awaited<ReturnType<typeof getDatasetsDatasetsGet>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getDatasetsDatasetsGet>>, TError, TData>
  >;
  request?: SecondParameter<typeof API>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Get Datasets
 */

export function useGetDatasetsDatasetsGet<
  TData = Awaited<ReturnType<typeof getDatasetsDatasetsGet>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getDatasetsDatasetsGet>>, TError, TData>
  >;
  request?: SecondParameter<typeof API>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetDatasetsDatasetsGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}
