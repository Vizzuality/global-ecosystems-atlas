/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 *  Global ecosystems atlas Tiler
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import { API } from "../../services/api";
import type { ErrorType } from "../../services/api";

import type {
  HTTPValidationError,
  ImageType,
  InteractivityResponse,
  PointCustomTilerPointGetParams,
  ResponseModelSuccessResponse,
  TileCustomTilerTilesZXYFormatGetParams,
} from "./strapi.schemas";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * We are always going to use the same timeMatrixSetId
 * @summary Tile
 */
export const tileCustomTilerTilesZXYFormatGet = (
  z: number,
  x: number,
  y: number,
  format: ImageType,
  params: TileCustomTilerTilesZXYFormatGetParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<unknown>(
    { url: `/custom/tiler/tiles/${z}/${x}/${y}.${format}`, method: "GET", params, signal },
    options,
  );
};

export const getTileCustomTilerTilesZXYFormatGetQueryKey = (
  z: number,
  x: number,
  y: number,
  format: ImageType,
  params: TileCustomTilerTilesZXYFormatGetParams,
) => {
  return [`/custom/tiler/tiles/${z}/${x}/${y}.${format}`, ...(params ? [params] : [])] as const;
};

export const getTileCustomTilerTilesZXYFormatGetQueryOptions = <
  TData = Awaited<ReturnType<typeof tileCustomTilerTilesZXYFormatGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  z: number,
  x: number,
  y: number,
  format: ImageType,
  params: TileCustomTilerTilesZXYFormatGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof tileCustomTilerTilesZXYFormatGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getTileCustomTilerTilesZXYFormatGetQueryKey(z, x, y, format, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof tileCustomTilerTilesZXYFormatGet>>> = ({
    signal,
  }) => tileCustomTilerTilesZXYFormatGet(z, x, y, format, params, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(z && x && y && format),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof tileCustomTilerTilesZXYFormatGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TileCustomTilerTilesZXYFormatGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof tileCustomTilerTilesZXYFormatGet>>
>;
export type TileCustomTilerTilesZXYFormatGetQueryError = ErrorType<HTTPValidationError>;

export function useTileCustomTilerTilesZXYFormatGet<
  TData = Awaited<ReturnType<typeof tileCustomTilerTilesZXYFormatGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  z: number,
  x: number,
  y: number,
  format: ImageType,
  params: TileCustomTilerTilesZXYFormatGetParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof tileCustomTilerTilesZXYFormatGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof tileCustomTilerTilesZXYFormatGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof API>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTileCustomTilerTilesZXYFormatGet<
  TData = Awaited<ReturnType<typeof tileCustomTilerTilesZXYFormatGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  z: number,
  x: number,
  y: number,
  format: ImageType,
  params: TileCustomTilerTilesZXYFormatGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof tileCustomTilerTilesZXYFormatGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof tileCustomTilerTilesZXYFormatGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useTileCustomTilerTilesZXYFormatGet<
  TData = Awaited<ReturnType<typeof tileCustomTilerTilesZXYFormatGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  z: number,
  x: number,
  y: number,
  format: ImageType,
  params: TileCustomTilerTilesZXYFormatGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof tileCustomTilerTilesZXYFormatGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Tile
 */

export function useTileCustomTilerTilesZXYFormatGet<
  TData = Awaited<ReturnType<typeof tileCustomTilerTilesZXYFormatGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  z: number,
  x: number,
  y: number,
  format: ImageType,
  params: TileCustomTilerTilesZXYFormatGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof tileCustomTilerTilesZXYFormatGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getTileCustomTilerTilesZXYFormatGetQueryOptions(
    z,
    x,
    y,
    format,
    params,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get Point value for a dataset.
 * @summary Point
 */
export const pointCustomTilerPointGet = (
  params: PointCustomTilerPointGetParams,
  options?: SecondParameter<typeof API>,
  signal?: AbortSignal,
) => {
  return API<InteractivityResponse>(
    { url: `/custom/tiler/point`, method: "GET", params, signal },
    options,
  );
};

export const getPointCustomTilerPointGetQueryKey = (params: PointCustomTilerPointGetParams) => {
  return [`/custom/tiler/point`, ...(params ? [params] : [])] as const;
};

export const getPointCustomTilerPointGetQueryOptions = <
  TData = Awaited<ReturnType<typeof pointCustomTilerPointGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  params: PointCustomTilerPointGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof pointCustomTilerPointGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof API>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getPointCustomTilerPointGetQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof pointCustomTilerPointGet>>> = ({
    signal,
  }) => pointCustomTilerPointGet(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof pointCustomTilerPointGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type PointCustomTilerPointGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof pointCustomTilerPointGet>>
>;
export type PointCustomTilerPointGetQueryError = ErrorType<HTTPValidationError>;

export function usePointCustomTilerPointGet<
  TData = Awaited<ReturnType<typeof pointCustomTilerPointGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  params: PointCustomTilerPointGetParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof pointCustomTilerPointGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof pointCustomTilerPointGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof API>;
  },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function usePointCustomTilerPointGet<
  TData = Awaited<ReturnType<typeof pointCustomTilerPointGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  params: PointCustomTilerPointGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof pointCustomTilerPointGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof pointCustomTilerPointGet>>,
          TError,
          TData
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function usePointCustomTilerPointGet<
  TData = Awaited<ReturnType<typeof pointCustomTilerPointGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  params: PointCustomTilerPointGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof pointCustomTilerPointGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
/**
 * @summary Point
 */

export function usePointCustomTilerPointGet<
  TData = Awaited<ReturnType<typeof pointCustomTilerPointGet>>,
  TError = ErrorType<HTTPValidationError>,
>(
  params: PointCustomTilerPointGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof pointCustomTilerPointGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof API>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getPointCustomTilerPointGetQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Update Colormap Dependency
 */
export const updateColormapDependencyCustomTilerColormapPost = (
  options?: SecondParameter<typeof API>,
) => {
  return API<ResponseModelSuccessResponse>(
    { url: `/custom/tiler/colormap`, method: "POST" },
    options,
  );
};

export const getUpdateColormapDependencyCustomTilerColormapPostMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateColormapDependencyCustomTilerColormapPost>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateColormapDependencyCustomTilerColormapPost>>,
  TError,
  void,
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateColormapDependencyCustomTilerColormapPost>>,
    void
  > = () => {
    return updateColormapDependencyCustomTilerColormapPost(requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateColormapDependencyCustomTilerColormapPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateColormapDependencyCustomTilerColormapPost>>
>;

export type UpdateColormapDependencyCustomTilerColormapPostMutationError = ErrorType<unknown>;

/**
 * @summary Update Colormap Dependency
 */
export const useUpdateColormapDependencyCustomTilerColormapPost = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateColormapDependencyCustomTilerColormapPost>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof API>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateColormapDependencyCustomTilerColormapPost>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions =
    getUpdateColormapDependencyCustomTilerColormapPostMutationOptions(options);

  return useMutation(mutationOptions);
};
