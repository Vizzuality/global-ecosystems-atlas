/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 *  Global ecosystems atlas Tiler
 * OpenAPI spec version: 0.1.0
 */
export type ApiLocationsLocationGet200 =
  | GeojsonPydanticGeometriesPoint
  | MultiPoint
  | LineString
  | MultiLineString
  | Polygon
  | MultiPolygon
  | GeometryCollection;

export type PointCustomTilerPointGetReproject =
  (typeof PointCustomTilerPointGetReproject)[keyof typeof PointCustomTilerPointGetReproject];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PointCustomTilerPointGetReproject = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  sum: "sum",
  rms: "rms",
} as const;

export type PointCustomTilerPointGetResampling =
  (typeof PointCustomTilerPointGetResampling)[keyof typeof PointCustomTilerPointGetResampling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PointCustomTilerPointGetResampling = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  gauss: "gauss",
  rms: "rms",
} as const;

export type PointCustomTilerPointGetParams = {
  /**
   * Longitude
   */
  lon: number;
  /**
   * Latitude
   */
  lat: number;
  /**
   * atlas asset name, one of `efgs`,`biomes` or `realms`
   */
  asset: string;
  /**
   * Coordinate Reference System of the input coords. Default to `epsg:4326`.
   */
  coord_crs?: string | null;
  /**
   * Dataset band indexes
   */
  classes?: string[] | null;
  /**
   * Overwrite internal Nodata value
   */
  nodata?: string | number | number | null;
  /**
   * Apply internal Scale/Offset. Defaults to `False`.
   */
  unscale?: boolean;
  /**
   * RasterIO resampling algorithm. Defaults to `nearest`.
   */
  resampling?: PointCustomTilerPointGetResampling;
  /**
   * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
   */
  reproject?: PointCustomTilerPointGetReproject;
};

export type TileCustomTilerTilesZXYFormatGetParams = {
  /**
   * atlas asset name, one of `efgs`,`biomes` or `realms`
   */
  asset: string;
  /**
   * Dataset band indexes
   */
  classes?: string[] | null;
};

/**
 * Point model.

response model for `/point` endpoints
 */
export interface TitilerCoreModelsResponsesPoint {
  band_names: string[];
  coordinates: number[];
  values: number[];
}

export type GeojsonPydanticGeometriesPointType =
  (typeof GeojsonPydanticGeometriesPointType)[keyof typeof GeojsonPydanticGeometriesPointType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GeojsonPydanticGeometriesPointType = {
  Point: "Point",
} as const;

export type GeojsonPydanticGeometriesPointCoordinates = Position2D | Position3D;

export type GeojsonPydanticGeometriesPointBbox =
  | [number, number, number, number]
  | [number, number, number, number, number, number]
  | null;

/**
 * Point Model
 */
export interface GeojsonPydanticGeometriesPoint {
  bbox?: GeojsonPydanticGeometriesPointBbox;
  coordinates: GeojsonPydanticGeometriesPointCoordinates;
  type: GeojsonPydanticGeometriesPointType;
}

export type WidgetMetadataAbstract = string | null;

export interface WidgetMetadata {
  abstract?: WidgetMetadataAbstract;
}

export type WidgetDataValue = number | number | null;

export type WidgetDataColor = string | null;

export interface WidgetData {
  color?: WidgetDataColor;
  id: string;
  label: string;
  value?: WidgetDataValue;
}

export type WidgetType = (typeof WidgetType)[keyof typeof WidgetType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const WidgetType = {
  widget: "widget",
} as const;

export interface Widget {
  id: string;
  metadata?: WidgetMetadata[];
  name: string;
  type: WidgetType;
}

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

export interface SuccessResponse {
  success?: boolean;
}

export type SourceDatasetYear = number | null;

export type SourceDatasetSpatialResolution = string | null;

export interface SourceDataset {
  dataset_pixel_value: number;
  efg_pixel_value: number;
  label: string;
  map_class_name: string;
  spatial_resolution?: SourceDatasetSpatialResolution;
  year: SourceDatasetYear;
}

export interface ResponseModelSuccessResponse {
  data: SuccessResponse;
}

export interface ResponseModelListWidget {
  data: Widget[];
}

export interface ResponseModelListWidgetData {
  data: WidgetData[];
}

export interface ResponseModelListLocation {
  data: Location[];
}

export interface ResponseModelListLayer {
  data: Layer[];
}

export interface ResponseModelListEcosystem {
  data: Ecosystem[];
}

export interface ResponseModelListDataset {
  data: Dataset[];
}

/**
 * @minItems 3
 * @maxItems 3
 */
export type Position3D = [number, number, number];

/**
 * @minItems 2
 * @maxItems 2
 */
export type Position2D = [number, number];

export type PolygonType = (typeof PolygonType)[keyof typeof PolygonType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PolygonType = {
  Polygon: "Polygon",
} as const;

export type PolygonCoordinatesItemItem = Position2D | Position3D;

export type PolygonBbox =
  | [number, number, number, number]
  | [number, number, number, number, number, number]
  | null;

/**
 * Polygon Model
 */
export interface Polygon {
  bbox?: PolygonBbox;
  coordinates: PolygonCoordinatesItemItem[][];
  type: PolygonType;
}

export type MultiPolygonType = (typeof MultiPolygonType)[keyof typeof MultiPolygonType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MultiPolygonType = {
  MultiPolygon: "MultiPolygon",
} as const;

export type MultiPolygonCoordinatesItemItemItem = Position2D | Position3D;

export type MultiPolygonBbox =
  | [number, number, number, number]
  | [number, number, number, number, number, number]
  | null;

/**
 * MultiPolygon Model
 */
export interface MultiPolygon {
  bbox?: MultiPolygonBbox;
  coordinates: MultiPolygonCoordinatesItemItemItem[][][];
  type: MultiPolygonType;
}

export type MultiPointType = (typeof MultiPointType)[keyof typeof MultiPointType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MultiPointType = {
  MultiPoint: "MultiPoint",
} as const;

export type MultiPointCoordinatesItem = Position2D | Position3D;

export type MultiPointBbox =
  | [number, number, number, number]
  | [number, number, number, number, number, number]
  | null;

/**
 * MultiPoint Model
 */
export interface MultiPoint {
  bbox?: MultiPointBbox;
  coordinates: MultiPointCoordinatesItem[];
  type: MultiPointType;
}

export type MultiLineStringType = (typeof MultiLineStringType)[keyof typeof MultiLineStringType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MultiLineStringType = {
  MultiLineString: "MultiLineString",
} as const;

export type MultiLineStringCoordinatesItemItem = Position2D | Position3D;

export type MultiLineStringBbox =
  | [number, number, number, number]
  | [number, number, number, number, number, number]
  | null;

/**
 * MultiLineString Model
 */
export interface MultiLineString {
  bbox?: MultiLineStringBbox;
  coordinates: MultiLineStringCoordinatesItemItem[][];
  type: MultiLineStringType;
}

export type MetadataVersion = string | null;

export type MetadataSource = string | null;

export type MetadataDescription = string | null;

export type MetadataAttribution = string | null;

export interface Metadata {
  attribution?: MetadataAttribution;
  description?: MetadataDescription;
  name: string;
  source?: MetadataSource;
  version?: MetadataVersion;
}

export interface Location {
  /**
   * @minItems 4
   * @maxItems 4
   */
  bounds: [number, number, number, number];
  efgs?: Ecosystem[];
  gis_name: string;
  iso: string;
  location_code: string;
}

export type LineStringType = (typeof LineStringType)[keyof typeof LineStringType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LineStringType = {
  LineString: "LineString",
} as const;

export type LineStringCoordinatesItem = Position2D | Position3D;

export type LineStringBbox =
  | [number, number, number, number]
  | [number, number, number, number, number, number]
  | null;

/**
 * LineString Model
 */
export interface LineString {
  bbox?: LineStringBbox;
  /** @minItems 2 */
  coordinates: LineStringCoordinatesItem[];
  type: LineStringType;
}

export type LayerTax = number | null;

export type LayerMetadata = Metadata | null;

export type LayerDefinition = string | null;

export interface Layer {
  definition?: LayerDefinition;
  metadata?: LayerMetadata;
  name: string;
  price: number;
  tags?: string[];
  tax?: LayerTax;
}

export type InteractivityResponseType =
  (typeof InteractivityResponseType)[keyof typeof InteractivityResponseType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InteractivityResponseType = {
  efgs: "efgs",
  biomes: "biomes",
  realms: "realms",
} as const;

export type InteractivityResponseLabel = string | null;

export interface InteractivityResponse {
  label: InteractivityResponseLabel;
  source_datasets: SourceDataset[];
  sources_agreement: string;
  type: InteractivityResponseType;
}

/**
 * Available Output image type.
 */
export type ImageType = (typeof ImageType)[keyof typeof ImageType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImageType = {
  png: "png",
  npy: "npy",
  tif: "tif",
  jpeg: "jpeg",
  jpg: "jpg",
  jp2: "jp2",
  webp: "webp",
  pngraw: "pngraw",
} as const;

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export type GeometryCollectionType =
  (typeof GeometryCollectionType)[keyof typeof GeometryCollectionType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GeometryCollectionType = {
  GeometryCollection: "GeometryCollection",
} as const;

export type GeometryCollectionGeometriesItem =
  | GeojsonPydanticGeometriesPoint
  | MultiPoint
  | LineString
  | MultiLineString
  | Polygon
  | MultiPolygon
  | GeometryCollection;

export type GeometryCollectionBbox =
  | [number, number, number, number]
  | [number, number, number, number, number, number]
  | null;

/**
 * GeometryCollection Model
 */
export interface GeometryCollection {
  bbox?: GeometryCollectionBbox;
  geometries: GeometryCollectionGeometriesItem[];
  type: GeometryCollectionType;
}

export type EcosystemEfgCode = string | null;

export type EcosystemBiomeName = string | null;

export interface Ecosystem {
  biome_name?: EcosystemBiomeName;
  efg_code?: EcosystemEfgCode;
  efg_name: number;
  id: string;
  realm_name?: string[];
}

export interface Dataset {
  id: string;
  key: string;
  LastModified: string;
  Size: number;
  url: string;
}
