/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 *  Global ecosystems atlas Tiler
 * OpenAPI spec version: 0.1.0
 */
export type WidgetMetadataAbstract = string | null;

export interface WidgetMetadata {
  abstract?: WidgetMetadataAbstract;
}

export type WidgetDataValue = number | number | null;

export type WidgetDataColor = string | null;

export interface WidgetData {
  color?: WidgetDataColor;
  id: string;
  label: string;
  value?: WidgetDataValue;
}

export type WidgetType = (typeof WidgetType)[keyof typeof WidgetType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const WidgetType = {
  widget: "widget",
} as const;

export interface Widget {
  id: string;
  metadata?: WidgetMetadata[];
  name: string;
  type: WidgetType;
}

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

export interface ResponseModelListWidget {
  data: Widget[];
}

export interface ResponseModelListWidgetData {
  data: WidgetData[];
}

export interface ResponseModelListLocation {
  data: Location[];
}

export interface ResponseModelListLayer {
  data: Layer[];
}

export interface ResponseModelListEcosystem {
  data: Ecosystem[];
}

export interface ResponseModelListDataset {
  data: Dataset[];
}

/**
 * Point model.

response model for `/point` endpoints
 */
export interface Point {
  band_names: string[];
  coordinates: number[];
  values: number[];
}

export type MetadataVersion = string | null;

export type MetadataSource = string | null;

export type MetadataDescription = string | null;

export type MetadataAttribution = string | null;

export interface Metadata {
  attribution?: MetadataAttribution;
  description?: MetadataDescription;
  name: string;
  source?: MetadataSource;
  version?: MetadataVersion;
}

export interface Location {
  /**
   * @minItems 4
   * @maxItems 4
   */
  bounds: [number, number, number, number];
  efgs?: Ecosystem[];
  gis_name: string;
  iso: string;
  location_code: string;
}

export type LayerTax = number | null;

export type LayerMetadata = Metadata | null;

export type LayerDefinition = string | null;

export interface Layer {
  definition?: LayerDefinition;
  metadata?: LayerMetadata;
  name: string;
  price: number;
  tags?: string[];
  tax?: LayerTax;
}

/**
 * Available Output image type.
 */
export type ImageType = (typeof ImageType)[keyof typeof ImageType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImageType = {
  png: "png",
  npy: "npy",
  tif: "tif",
  jpeg: "jpeg",
  jpg: "jpg",
  jp2: "jp2",
  webp: "webp",
  pngraw: "pngraw",
} as const;

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export type EcosystemEfgCode = string | null;

export type EcosystemBiomeName = string | null;

export interface Ecosystem {
  biome_name?: EcosystemBiomeName;
  efg_code?: EcosystemEfgCode;
  efg_name: number;
  id: string;
  realm_name?: string[];
}

export interface Dataset {
  id: string;
  key: string;
  LastModified: string;
  Size: number;
  url: string;
}
