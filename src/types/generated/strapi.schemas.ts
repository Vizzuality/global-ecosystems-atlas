/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 *  Global ecosystems atlas Tiler
 * OpenAPI spec version: 0.1.0
 */
export type PointTilerPointLonLatGetReproject =
  (typeof PointTilerPointLonLatGetReproject)[keyof typeof PointTilerPointLonLatGetReproject];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PointTilerPointLonLatGetReproject = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  sum: "sum",
  rms: "rms",
} as const;

export type PointTilerPointLonLatGetResampling =
  (typeof PointTilerPointLonLatGetResampling)[keyof typeof PointTilerPointLonLatGetResampling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PointTilerPointLonLatGetResampling = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  gauss: "gauss",
  rms: "rms",
} as const;

export type PointTilerPointLonLatGetParams = {
  /**
   * asset name
   */
  asset: string;
  /**
   * Coordinate Reference System of the input coords. Default to `epsg:4326`.
   */
  coord_crs?: string | null;
  /**
   * Dataset band indexes
   */
  bidx?: number[] | null;
  /**
   * rio-tiler's band math expression
   */
  expression?: string | null;
  /**
   * Overwrite internal Nodata value
   */
  nodata?: string | number | number | null;
  /**
   * Apply internal Scale/Offset. Defaults to `False`.
   */
  unscale?: boolean;
  /**
   * RasterIO resampling algorithm. Defaults to `nearest`.
   */
  resampling?: PointTilerPointLonLatGetResampling;
  /**
   * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
   */
  reproject?: PointTilerPointLonLatGetReproject;
};

export type TileTilerTilesZXYGetColormapType =
  (typeof TileTilerTilesZXYGetColormapType)[keyof typeof TileTilerTilesZXYGetColormapType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesZXYGetColormapType = {
  explicit: "explicit",
  linear: "linear",
} as const;

export type TileTilerTilesZXYGetColormapName =
  (typeof TileTilerTilesZXYGetColormapName)[keyof typeof TileTilerTilesZXYGetColormapName];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesZXYGetColormapName = {
  accent: "accent",
  accent_r: "accent_r",
  afmhot: "afmhot",
  afmhot_r: "afmhot_r",
  algae: "algae",
  algae_r: "algae_r",
  amp: "amp",
  amp_r: "amp_r",
  autumn: "autumn",
  autumn_r: "autumn_r",
  balance: "balance",
  balance_r: "balance_r",
  binary: "binary",
  binary_r: "binary_r",
  blues: "blues",
  blues_r: "blues_r",
  bone: "bone",
  bone_r: "bone_r",
  brbg: "brbg",
  brbg_r: "brbg_r",
  brg: "brg",
  brg_r: "brg_r",
  bugn: "bugn",
  bugn_r: "bugn_r",
  bupu: "bupu",
  bupu_r: "bupu_r",
  bwr: "bwr",
  bwr_r: "bwr_r",
  cfastie: "cfastie",
  cividis: "cividis",
  cividis_r: "cividis_r",
  cmrmap: "cmrmap",
  cmrmap_r: "cmrmap_r",
  cool: "cool",
  cool_r: "cool_r",
  coolwarm: "coolwarm",
  coolwarm_r: "coolwarm_r",
  copper: "copper",
  copper_r: "copper_r",
  cubehelix: "cubehelix",
  cubehelix_r: "cubehelix_r",
  curl: "curl",
  curl_r: "curl_r",
  dark2: "dark2",
  dark2_r: "dark2_r",
  deep: "deep",
  deep_r: "deep_r",
  delta: "delta",
  delta_r: "delta_r",
  dense: "dense",
  dense_r: "dense_r",
  diff: "diff",
  diff_r: "diff_r",
  flag: "flag",
  flag_r: "flag_r",
  gist_earth: "gist_earth",
  gist_earth_r: "gist_earth_r",
  gist_gray: "gist_gray",
  gist_gray_r: "gist_gray_r",
  gist_heat: "gist_heat",
  gist_heat_r: "gist_heat_r",
  gist_ncar: "gist_ncar",
  gist_ncar_r: "gist_ncar_r",
  gist_rainbow: "gist_rainbow",
  gist_rainbow_r: "gist_rainbow_r",
  gist_stern: "gist_stern",
  gist_stern_r: "gist_stern_r",
  gist_yarg: "gist_yarg",
  gist_yarg_r: "gist_yarg_r",
  gnbu: "gnbu",
  gnbu_r: "gnbu_r",
  gnuplot: "gnuplot",
  gnuplot2: "gnuplot2",
  gnuplot2_r: "gnuplot2_r",
  gnuplot_r: "gnuplot_r",
  gray: "gray",
  gray_r: "gray_r",
  greens: "greens",
  greens_r: "greens_r",
  greys: "greys",
  greys_r: "greys_r",
  haline: "haline",
  haline_r: "haline_r",
  hot: "hot",
  hot_r: "hot_r",
  hsv: "hsv",
  hsv_r: "hsv_r",
  ice: "ice",
  ice_r: "ice_r",
  inferno: "inferno",
  inferno_r: "inferno_r",
  jet: "jet",
  jet_r: "jet_r",
  magma: "magma",
  magma_r: "magma_r",
  matter: "matter",
  matter_r: "matter_r",
  nipy_spectral: "nipy_spectral",
  nipy_spectral_r: "nipy_spectral_r",
  ocean: "ocean",
  ocean_r: "ocean_r",
  oranges: "oranges",
  oranges_r: "oranges_r",
  orrd: "orrd",
  orrd_r: "orrd_r",
  oxy: "oxy",
  oxy_r: "oxy_r",
  paired: "paired",
  paired_r: "paired_r",
  pastel1: "pastel1",
  pastel1_r: "pastel1_r",
  pastel2: "pastel2",
  pastel2_r: "pastel2_r",
  phase: "phase",
  phase_r: "phase_r",
  pink: "pink",
  pink_r: "pink_r",
  piyg: "piyg",
  piyg_r: "piyg_r",
  plasma: "plasma",
  plasma_r: "plasma_r",
  prgn: "prgn",
  prgn_r: "prgn_r",
  prism: "prism",
  prism_r: "prism_r",
  pubu: "pubu",
  pubu_r: "pubu_r",
  pubugn: "pubugn",
  pubugn_r: "pubugn_r",
  puor: "puor",
  puor_r: "puor_r",
  purd: "purd",
  purd_r: "purd_r",
  purples: "purples",
  purples_r: "purples_r",
  rain: "rain",
  rain_r: "rain_r",
  rainbow: "rainbow",
  rainbow_r: "rainbow_r",
  rdbu: "rdbu",
  rdbu_r: "rdbu_r",
  rdgy: "rdgy",
  rdgy_r: "rdgy_r",
  rdpu: "rdpu",
  rdpu_r: "rdpu_r",
  rdylbu: "rdylbu",
  rdylbu_r: "rdylbu_r",
  rdylgn: "rdylgn",
  rdylgn_r: "rdylgn_r",
  reds: "reds",
  reds_r: "reds_r",
  rplumbo: "rplumbo",
  schwarzwald: "schwarzwald",
  seismic: "seismic",
  seismic_r: "seismic_r",
  set1: "set1",
  set1_r: "set1_r",
  set2: "set2",
  set2_r: "set2_r",
  set3: "set3",
  set3_r: "set3_r",
  solar: "solar",
  solar_r: "solar_r",
  spectral: "spectral",
  spectral_r: "spectral_r",
  speed: "speed",
  speed_r: "speed_r",
  spring: "spring",
  spring_r: "spring_r",
  summer: "summer",
  summer_r: "summer_r",
  tab10: "tab10",
  tab10_r: "tab10_r",
  tab20: "tab20",
  tab20_r: "tab20_r",
  tab20b: "tab20b",
  tab20b_r: "tab20b_r",
  tab20c: "tab20c",
  tab20c_r: "tab20c_r",
  tarn: "tarn",
  tarn_r: "tarn_r",
  tempo: "tempo",
  tempo_r: "tempo_r",
  terrain: "terrain",
  terrain_r: "terrain_r",
  thermal: "thermal",
  thermal_r: "thermal_r",
  topo: "topo",
  topo_r: "topo_r",
  turbid: "turbid",
  turbid_r: "turbid_r",
  turbo: "turbo",
  turbo_r: "turbo_r",
  twilight: "twilight",
  twilight_r: "twilight_r",
  twilight_shifted: "twilight_shifted",
  twilight_shifted_r: "twilight_shifted_r",
  viridis: "viridis",
  viridis_r: "viridis_r",
  winter: "winter",
  winter_r: "winter_r",
  wistia: "wistia",
  wistia_r: "wistia_r",
  ylgn: "ylgn",
  ylgn_r: "ylgn_r",
  ylgnbu: "ylgnbu",
  ylgnbu_r: "ylgnbu_r",
  ylorbr: "ylorbr",
  ylorbr_r: "ylorbr_r",
  ylorrd: "ylorrd",
  ylorrd_r: "ylorrd_r",
} as const;

export type TileTilerTilesZXYGetAlgorithm =
  (typeof TileTilerTilesZXYGetAlgorithm)[keyof typeof TileTilerTilesZXYGetAlgorithm];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesZXYGetAlgorithm = {
  hillshade: "hillshade",
  contours: "contours",
  normalizedIndex: "normalizedIndex",
  terrarium: "terrarium",
  terrainrgb: "terrainrgb",
} as const;

export type TileTilerTilesZXYGetReproject =
  (typeof TileTilerTilesZXYGetReproject)[keyof typeof TileTilerTilesZXYGetReproject];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesZXYGetReproject = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  sum: "sum",
  rms: "rms",
} as const;

export type TileTilerTilesZXYGetResampling =
  (typeof TileTilerTilesZXYGetResampling)[keyof typeof TileTilerTilesZXYGetResampling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesZXYGetResampling = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  gauss: "gauss",
  rms: "rms",
} as const;

export type TileTilerTilesZXYGetTileMatrixSetId =
  (typeof TileTilerTilesZXYGetTileMatrixSetId)[keyof typeof TileTilerTilesZXYGetTileMatrixSetId];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesZXYGetTileMatrixSetId = {
  CDB1GlobalGrid: "CDB1GlobalGrid",
  CanadianNAD83_LCC: "CanadianNAD83_LCC",
  EuropeanETRS89_LAEAQuad: "EuropeanETRS89_LAEAQuad",
  GNOSISGlobalGrid: "GNOSISGlobalGrid",
  LINZAntarticaMapTilegrid: "LINZAntarticaMapTilegrid",
  NZTM2000Quad: "NZTM2000Quad",
  UPSAntarcticWGS84Quad: "UPSAntarcticWGS84Quad",
  UPSArcticWGS84Quad: "UPSArcticWGS84Quad",
  UTM31WGS84Quad: "UTM31WGS84Quad",
  WGS1984Quad: "WGS1984Quad",
  WebMercatorQuad: "WebMercatorQuad",
  WorldCRS84Quad: "WorldCRS84Quad",
  WorldMercatorWGS84Quad: "WorldMercatorWGS84Quad",
} as const;

export type TileTilerTilesZXYGetParams = {
  tileMatrixSetId?: TileTilerTilesZXYGetTileMatrixSetId;
  scale?: number;
  format?: ImageType;
  /**
   * asset name
   */
  asset: string;
  /**
   * Dataset band indexes
   */
  bidx?: number[] | null;
  /**
   * rio-tiler's band math expression
   */
  expression?: string | null;
  /**
   * Overwrite internal Nodata value
   */
  nodata?: string | number | number | null;
  /**
   * Apply internal Scale/Offset. Defaults to `False`.
   */
  unscale?: boolean;
  /**
   * RasterIO resampling algorithm. Defaults to `nearest`.
   */
  resampling?: TileTilerTilesZXYGetResampling;
  /**
   * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
   */
  reproject?: TileTilerTilesZXYGetReproject;
  /**
   * Buffer on each side of the given tile. It must be a multiple of `0.5`. Output **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257, 1.0 = 258x258).
   */
  buffer?: number | null;
  /**
   * Padding to apply to each tile edge. Helps reduce resampling artefacts along edges. Defaults to `0`.
   */
  padding?: number | null;
  /**
   * Algorithm name
   */
  algorithm?: TileTilerTilesZXYGetAlgorithm;
  /**
   * Algorithm parameter
   */
  algorithm_params?: string | null;
  /**
   * comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
   */
  rescale?: string[] | null;
  /**
   * rio-color formula (info: https://github.com/mapbox/rio-color)
   */
  color_formula?: string | null;
  /**
   * Colormap name
   */
  colormap_name?: TileTilerTilesZXYGetColormapName;
  /**
   * JSON encoded custom Colormap
   */
  colormap?: string;
  /**
   * User input colormap type.
   */
  colormap_type?: TileTilerTilesZXYGetColormapType;
  /**
   * Add mask to the output data. Defaults to `True`
   */
  return_mask?: boolean;
};

export type TileTilerTilesZXYFormatGetColormapType =
  (typeof TileTilerTilesZXYFormatGetColormapType)[keyof typeof TileTilerTilesZXYFormatGetColormapType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesZXYFormatGetColormapType = {
  explicit: "explicit",
  linear: "linear",
} as const;

export type TileTilerTilesZXYFormatGetColormapName =
  (typeof TileTilerTilesZXYFormatGetColormapName)[keyof typeof TileTilerTilesZXYFormatGetColormapName];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesZXYFormatGetColormapName = {
  accent: "accent",
  accent_r: "accent_r",
  afmhot: "afmhot",
  afmhot_r: "afmhot_r",
  algae: "algae",
  algae_r: "algae_r",
  amp: "amp",
  amp_r: "amp_r",
  autumn: "autumn",
  autumn_r: "autumn_r",
  balance: "balance",
  balance_r: "balance_r",
  binary: "binary",
  binary_r: "binary_r",
  blues: "blues",
  blues_r: "blues_r",
  bone: "bone",
  bone_r: "bone_r",
  brbg: "brbg",
  brbg_r: "brbg_r",
  brg: "brg",
  brg_r: "brg_r",
  bugn: "bugn",
  bugn_r: "bugn_r",
  bupu: "bupu",
  bupu_r: "bupu_r",
  bwr: "bwr",
  bwr_r: "bwr_r",
  cfastie: "cfastie",
  cividis: "cividis",
  cividis_r: "cividis_r",
  cmrmap: "cmrmap",
  cmrmap_r: "cmrmap_r",
  cool: "cool",
  cool_r: "cool_r",
  coolwarm: "coolwarm",
  coolwarm_r: "coolwarm_r",
  copper: "copper",
  copper_r: "copper_r",
  cubehelix: "cubehelix",
  cubehelix_r: "cubehelix_r",
  curl: "curl",
  curl_r: "curl_r",
  dark2: "dark2",
  dark2_r: "dark2_r",
  deep: "deep",
  deep_r: "deep_r",
  delta: "delta",
  delta_r: "delta_r",
  dense: "dense",
  dense_r: "dense_r",
  diff: "diff",
  diff_r: "diff_r",
  flag: "flag",
  flag_r: "flag_r",
  gist_earth: "gist_earth",
  gist_earth_r: "gist_earth_r",
  gist_gray: "gist_gray",
  gist_gray_r: "gist_gray_r",
  gist_heat: "gist_heat",
  gist_heat_r: "gist_heat_r",
  gist_ncar: "gist_ncar",
  gist_ncar_r: "gist_ncar_r",
  gist_rainbow: "gist_rainbow",
  gist_rainbow_r: "gist_rainbow_r",
  gist_stern: "gist_stern",
  gist_stern_r: "gist_stern_r",
  gist_yarg: "gist_yarg",
  gist_yarg_r: "gist_yarg_r",
  gnbu: "gnbu",
  gnbu_r: "gnbu_r",
  gnuplot: "gnuplot",
  gnuplot2: "gnuplot2",
  gnuplot2_r: "gnuplot2_r",
  gnuplot_r: "gnuplot_r",
  gray: "gray",
  gray_r: "gray_r",
  greens: "greens",
  greens_r: "greens_r",
  greys: "greys",
  greys_r: "greys_r",
  haline: "haline",
  haline_r: "haline_r",
  hot: "hot",
  hot_r: "hot_r",
  hsv: "hsv",
  hsv_r: "hsv_r",
  ice: "ice",
  ice_r: "ice_r",
  inferno: "inferno",
  inferno_r: "inferno_r",
  jet: "jet",
  jet_r: "jet_r",
  magma: "magma",
  magma_r: "magma_r",
  matter: "matter",
  matter_r: "matter_r",
  nipy_spectral: "nipy_spectral",
  nipy_spectral_r: "nipy_spectral_r",
  ocean: "ocean",
  ocean_r: "ocean_r",
  oranges: "oranges",
  oranges_r: "oranges_r",
  orrd: "orrd",
  orrd_r: "orrd_r",
  oxy: "oxy",
  oxy_r: "oxy_r",
  paired: "paired",
  paired_r: "paired_r",
  pastel1: "pastel1",
  pastel1_r: "pastel1_r",
  pastel2: "pastel2",
  pastel2_r: "pastel2_r",
  phase: "phase",
  phase_r: "phase_r",
  pink: "pink",
  pink_r: "pink_r",
  piyg: "piyg",
  piyg_r: "piyg_r",
  plasma: "plasma",
  plasma_r: "plasma_r",
  prgn: "prgn",
  prgn_r: "prgn_r",
  prism: "prism",
  prism_r: "prism_r",
  pubu: "pubu",
  pubu_r: "pubu_r",
  pubugn: "pubugn",
  pubugn_r: "pubugn_r",
  puor: "puor",
  puor_r: "puor_r",
  purd: "purd",
  purd_r: "purd_r",
  purples: "purples",
  purples_r: "purples_r",
  rain: "rain",
  rain_r: "rain_r",
  rainbow: "rainbow",
  rainbow_r: "rainbow_r",
  rdbu: "rdbu",
  rdbu_r: "rdbu_r",
  rdgy: "rdgy",
  rdgy_r: "rdgy_r",
  rdpu: "rdpu",
  rdpu_r: "rdpu_r",
  rdylbu: "rdylbu",
  rdylbu_r: "rdylbu_r",
  rdylgn: "rdylgn",
  rdylgn_r: "rdylgn_r",
  reds: "reds",
  reds_r: "reds_r",
  rplumbo: "rplumbo",
  schwarzwald: "schwarzwald",
  seismic: "seismic",
  seismic_r: "seismic_r",
  set1: "set1",
  set1_r: "set1_r",
  set2: "set2",
  set2_r: "set2_r",
  set3: "set3",
  set3_r: "set3_r",
  solar: "solar",
  solar_r: "solar_r",
  spectral: "spectral",
  spectral_r: "spectral_r",
  speed: "speed",
  speed_r: "speed_r",
  spring: "spring",
  spring_r: "spring_r",
  summer: "summer",
  summer_r: "summer_r",
  tab10: "tab10",
  tab10_r: "tab10_r",
  tab20: "tab20",
  tab20_r: "tab20_r",
  tab20b: "tab20b",
  tab20b_r: "tab20b_r",
  tab20c: "tab20c",
  tab20c_r: "tab20c_r",
  tarn: "tarn",
  tarn_r: "tarn_r",
  tempo: "tempo",
  tempo_r: "tempo_r",
  terrain: "terrain",
  terrain_r: "terrain_r",
  thermal: "thermal",
  thermal_r: "thermal_r",
  topo: "topo",
  topo_r: "topo_r",
  turbid: "turbid",
  turbid_r: "turbid_r",
  turbo: "turbo",
  turbo_r: "turbo_r",
  twilight: "twilight",
  twilight_r: "twilight_r",
  twilight_shifted: "twilight_shifted",
  twilight_shifted_r: "twilight_shifted_r",
  viridis: "viridis",
  viridis_r: "viridis_r",
  winter: "winter",
  winter_r: "winter_r",
  wistia: "wistia",
  wistia_r: "wistia_r",
  ylgn: "ylgn",
  ylgn_r: "ylgn_r",
  ylgnbu: "ylgnbu",
  ylgnbu_r: "ylgnbu_r",
  ylorbr: "ylorbr",
  ylorbr_r: "ylorbr_r",
  ylorrd: "ylorrd",
  ylorrd_r: "ylorrd_r",
} as const;

export type TileTilerTilesZXYFormatGetAlgorithm =
  (typeof TileTilerTilesZXYFormatGetAlgorithm)[keyof typeof TileTilerTilesZXYFormatGetAlgorithm];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesZXYFormatGetAlgorithm = {
  hillshade: "hillshade",
  contours: "contours",
  normalizedIndex: "normalizedIndex",
  terrarium: "terrarium",
  terrainrgb: "terrainrgb",
} as const;

export type TileTilerTilesZXYFormatGetReproject =
  (typeof TileTilerTilesZXYFormatGetReproject)[keyof typeof TileTilerTilesZXYFormatGetReproject];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesZXYFormatGetReproject = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  sum: "sum",
  rms: "rms",
} as const;

export type TileTilerTilesZXYFormatGetResampling =
  (typeof TileTilerTilesZXYFormatGetResampling)[keyof typeof TileTilerTilesZXYFormatGetResampling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesZXYFormatGetResampling = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  gauss: "gauss",
  rms: "rms",
} as const;

export type TileTilerTilesZXYFormatGetTileMatrixSetId =
  (typeof TileTilerTilesZXYFormatGetTileMatrixSetId)[keyof typeof TileTilerTilesZXYFormatGetTileMatrixSetId];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesZXYFormatGetTileMatrixSetId = {
  CDB1GlobalGrid: "CDB1GlobalGrid",
  CanadianNAD83_LCC: "CanadianNAD83_LCC",
  EuropeanETRS89_LAEAQuad: "EuropeanETRS89_LAEAQuad",
  GNOSISGlobalGrid: "GNOSISGlobalGrid",
  LINZAntarticaMapTilegrid: "LINZAntarticaMapTilegrid",
  NZTM2000Quad: "NZTM2000Quad",
  UPSAntarcticWGS84Quad: "UPSAntarcticWGS84Quad",
  UPSArcticWGS84Quad: "UPSArcticWGS84Quad",
  UTM31WGS84Quad: "UTM31WGS84Quad",
  WGS1984Quad: "WGS1984Quad",
  WebMercatorQuad: "WebMercatorQuad",
  WorldCRS84Quad: "WorldCRS84Quad",
  WorldMercatorWGS84Quad: "WorldMercatorWGS84Quad",
} as const;

export type TileTilerTilesZXYFormatGetParams = {
  tileMatrixSetId?: TileTilerTilesZXYFormatGetTileMatrixSetId;
  scale?: number;
  /**
   * asset name
   */
  asset: string;
  /**
   * Dataset band indexes
   */
  bidx?: number[] | null;
  /**
   * rio-tiler's band math expression
   */
  expression?: string | null;
  /**
   * Overwrite internal Nodata value
   */
  nodata?: string | number | number | null;
  /**
   * Apply internal Scale/Offset. Defaults to `False`.
   */
  unscale?: boolean;
  /**
   * RasterIO resampling algorithm. Defaults to `nearest`.
   */
  resampling?: TileTilerTilesZXYFormatGetResampling;
  /**
   * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
   */
  reproject?: TileTilerTilesZXYFormatGetReproject;
  /**
   * Buffer on each side of the given tile. It must be a multiple of `0.5`. Output **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257, 1.0 = 258x258).
   */
  buffer?: number | null;
  /**
   * Padding to apply to each tile edge. Helps reduce resampling artefacts along edges. Defaults to `0`.
   */
  padding?: number | null;
  /**
   * Algorithm name
   */
  algorithm?: TileTilerTilesZXYFormatGetAlgorithm;
  /**
   * Algorithm parameter
   */
  algorithm_params?: string | null;
  /**
   * comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
   */
  rescale?: string[] | null;
  /**
   * rio-color formula (info: https://github.com/mapbox/rio-color)
   */
  color_formula?: string | null;
  /**
   * Colormap name
   */
  colormap_name?: TileTilerTilesZXYFormatGetColormapName;
  /**
   * JSON encoded custom Colormap
   */
  colormap?: string;
  /**
   * User input colormap type.
   */
  colormap_type?: TileTilerTilesZXYFormatGetColormapType;
  /**
   * Add mask to the output data. Defaults to `True`
   */
  return_mask?: boolean;
};

export type TileTilerTilesZXYScaleXGetColormapType =
  (typeof TileTilerTilesZXYScaleXGetColormapType)[keyof typeof TileTilerTilesZXYScaleXGetColormapType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesZXYScaleXGetColormapType = {
  explicit: "explicit",
  linear: "linear",
} as const;

export type TileTilerTilesZXYScaleXGetColormapName =
  (typeof TileTilerTilesZXYScaleXGetColormapName)[keyof typeof TileTilerTilesZXYScaleXGetColormapName];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesZXYScaleXGetColormapName = {
  accent: "accent",
  accent_r: "accent_r",
  afmhot: "afmhot",
  afmhot_r: "afmhot_r",
  algae: "algae",
  algae_r: "algae_r",
  amp: "amp",
  amp_r: "amp_r",
  autumn: "autumn",
  autumn_r: "autumn_r",
  balance: "balance",
  balance_r: "balance_r",
  binary: "binary",
  binary_r: "binary_r",
  blues: "blues",
  blues_r: "blues_r",
  bone: "bone",
  bone_r: "bone_r",
  brbg: "brbg",
  brbg_r: "brbg_r",
  brg: "brg",
  brg_r: "brg_r",
  bugn: "bugn",
  bugn_r: "bugn_r",
  bupu: "bupu",
  bupu_r: "bupu_r",
  bwr: "bwr",
  bwr_r: "bwr_r",
  cfastie: "cfastie",
  cividis: "cividis",
  cividis_r: "cividis_r",
  cmrmap: "cmrmap",
  cmrmap_r: "cmrmap_r",
  cool: "cool",
  cool_r: "cool_r",
  coolwarm: "coolwarm",
  coolwarm_r: "coolwarm_r",
  copper: "copper",
  copper_r: "copper_r",
  cubehelix: "cubehelix",
  cubehelix_r: "cubehelix_r",
  curl: "curl",
  curl_r: "curl_r",
  dark2: "dark2",
  dark2_r: "dark2_r",
  deep: "deep",
  deep_r: "deep_r",
  delta: "delta",
  delta_r: "delta_r",
  dense: "dense",
  dense_r: "dense_r",
  diff: "diff",
  diff_r: "diff_r",
  flag: "flag",
  flag_r: "flag_r",
  gist_earth: "gist_earth",
  gist_earth_r: "gist_earth_r",
  gist_gray: "gist_gray",
  gist_gray_r: "gist_gray_r",
  gist_heat: "gist_heat",
  gist_heat_r: "gist_heat_r",
  gist_ncar: "gist_ncar",
  gist_ncar_r: "gist_ncar_r",
  gist_rainbow: "gist_rainbow",
  gist_rainbow_r: "gist_rainbow_r",
  gist_stern: "gist_stern",
  gist_stern_r: "gist_stern_r",
  gist_yarg: "gist_yarg",
  gist_yarg_r: "gist_yarg_r",
  gnbu: "gnbu",
  gnbu_r: "gnbu_r",
  gnuplot: "gnuplot",
  gnuplot2: "gnuplot2",
  gnuplot2_r: "gnuplot2_r",
  gnuplot_r: "gnuplot_r",
  gray: "gray",
  gray_r: "gray_r",
  greens: "greens",
  greens_r: "greens_r",
  greys: "greys",
  greys_r: "greys_r",
  haline: "haline",
  haline_r: "haline_r",
  hot: "hot",
  hot_r: "hot_r",
  hsv: "hsv",
  hsv_r: "hsv_r",
  ice: "ice",
  ice_r: "ice_r",
  inferno: "inferno",
  inferno_r: "inferno_r",
  jet: "jet",
  jet_r: "jet_r",
  magma: "magma",
  magma_r: "magma_r",
  matter: "matter",
  matter_r: "matter_r",
  nipy_spectral: "nipy_spectral",
  nipy_spectral_r: "nipy_spectral_r",
  ocean: "ocean",
  ocean_r: "ocean_r",
  oranges: "oranges",
  oranges_r: "oranges_r",
  orrd: "orrd",
  orrd_r: "orrd_r",
  oxy: "oxy",
  oxy_r: "oxy_r",
  paired: "paired",
  paired_r: "paired_r",
  pastel1: "pastel1",
  pastel1_r: "pastel1_r",
  pastel2: "pastel2",
  pastel2_r: "pastel2_r",
  phase: "phase",
  phase_r: "phase_r",
  pink: "pink",
  pink_r: "pink_r",
  piyg: "piyg",
  piyg_r: "piyg_r",
  plasma: "plasma",
  plasma_r: "plasma_r",
  prgn: "prgn",
  prgn_r: "prgn_r",
  prism: "prism",
  prism_r: "prism_r",
  pubu: "pubu",
  pubu_r: "pubu_r",
  pubugn: "pubugn",
  pubugn_r: "pubugn_r",
  puor: "puor",
  puor_r: "puor_r",
  purd: "purd",
  purd_r: "purd_r",
  purples: "purples",
  purples_r: "purples_r",
  rain: "rain",
  rain_r: "rain_r",
  rainbow: "rainbow",
  rainbow_r: "rainbow_r",
  rdbu: "rdbu",
  rdbu_r: "rdbu_r",
  rdgy: "rdgy",
  rdgy_r: "rdgy_r",
  rdpu: "rdpu",
  rdpu_r: "rdpu_r",
  rdylbu: "rdylbu",
  rdylbu_r: "rdylbu_r",
  rdylgn: "rdylgn",
  rdylgn_r: "rdylgn_r",
  reds: "reds",
  reds_r: "reds_r",
  rplumbo: "rplumbo",
  schwarzwald: "schwarzwald",
  seismic: "seismic",
  seismic_r: "seismic_r",
  set1: "set1",
  set1_r: "set1_r",
  set2: "set2",
  set2_r: "set2_r",
  set3: "set3",
  set3_r: "set3_r",
  solar: "solar",
  solar_r: "solar_r",
  spectral: "spectral",
  spectral_r: "spectral_r",
  speed: "speed",
  speed_r: "speed_r",
  spring: "spring",
  spring_r: "spring_r",
  summer: "summer",
  summer_r: "summer_r",
  tab10: "tab10",
  tab10_r: "tab10_r",
  tab20: "tab20",
  tab20_r: "tab20_r",
  tab20b: "tab20b",
  tab20b_r: "tab20b_r",
  tab20c: "tab20c",
  tab20c_r: "tab20c_r",
  tarn: "tarn",
  tarn_r: "tarn_r",
  tempo: "tempo",
  tempo_r: "tempo_r",
  terrain: "terrain",
  terrain_r: "terrain_r",
  thermal: "thermal",
  thermal_r: "thermal_r",
  topo: "topo",
  topo_r: "topo_r",
  turbid: "turbid",
  turbid_r: "turbid_r",
  turbo: "turbo",
  turbo_r: "turbo_r",
  twilight: "twilight",
  twilight_r: "twilight_r",
  twilight_shifted: "twilight_shifted",
  twilight_shifted_r: "twilight_shifted_r",
  viridis: "viridis",
  viridis_r: "viridis_r",
  winter: "winter",
  winter_r: "winter_r",
  wistia: "wistia",
  wistia_r: "wistia_r",
  ylgn: "ylgn",
  ylgn_r: "ylgn_r",
  ylgnbu: "ylgnbu",
  ylgnbu_r: "ylgnbu_r",
  ylorbr: "ylorbr",
  ylorbr_r: "ylorbr_r",
  ylorrd: "ylorrd",
  ylorrd_r: "ylorrd_r",
} as const;

export type TileTilerTilesZXYScaleXGetAlgorithm =
  (typeof TileTilerTilesZXYScaleXGetAlgorithm)[keyof typeof TileTilerTilesZXYScaleXGetAlgorithm];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesZXYScaleXGetAlgorithm = {
  hillshade: "hillshade",
  contours: "contours",
  normalizedIndex: "normalizedIndex",
  terrarium: "terrarium",
  terrainrgb: "terrainrgb",
} as const;

export type TileTilerTilesZXYScaleXGetReproject =
  (typeof TileTilerTilesZXYScaleXGetReproject)[keyof typeof TileTilerTilesZXYScaleXGetReproject];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesZXYScaleXGetReproject = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  sum: "sum",
  rms: "rms",
} as const;

export type TileTilerTilesZXYScaleXGetResampling =
  (typeof TileTilerTilesZXYScaleXGetResampling)[keyof typeof TileTilerTilesZXYScaleXGetResampling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesZXYScaleXGetResampling = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  gauss: "gauss",
  rms: "rms",
} as const;

export type TileTilerTilesZXYScaleXGetTileMatrixSetId =
  (typeof TileTilerTilesZXYScaleXGetTileMatrixSetId)[keyof typeof TileTilerTilesZXYScaleXGetTileMatrixSetId];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesZXYScaleXGetTileMatrixSetId = {
  CDB1GlobalGrid: "CDB1GlobalGrid",
  CanadianNAD83_LCC: "CanadianNAD83_LCC",
  EuropeanETRS89_LAEAQuad: "EuropeanETRS89_LAEAQuad",
  GNOSISGlobalGrid: "GNOSISGlobalGrid",
  LINZAntarticaMapTilegrid: "LINZAntarticaMapTilegrid",
  NZTM2000Quad: "NZTM2000Quad",
  UPSAntarcticWGS84Quad: "UPSAntarcticWGS84Quad",
  UPSArcticWGS84Quad: "UPSArcticWGS84Quad",
  UTM31WGS84Quad: "UTM31WGS84Quad",
  WGS1984Quad: "WGS1984Quad",
  WebMercatorQuad: "WebMercatorQuad",
  WorldCRS84Quad: "WorldCRS84Quad",
  WorldMercatorWGS84Quad: "WorldMercatorWGS84Quad",
} as const;

export type TileTilerTilesZXYScaleXGetParams = {
  tileMatrixSetId?: TileTilerTilesZXYScaleXGetTileMatrixSetId;
  format?: ImageType;
  /**
   * asset name
   */
  asset: string;
  /**
   * Dataset band indexes
   */
  bidx?: number[] | null;
  /**
   * rio-tiler's band math expression
   */
  expression?: string | null;
  /**
   * Overwrite internal Nodata value
   */
  nodata?: string | number | number | null;
  /**
   * Apply internal Scale/Offset. Defaults to `False`.
   */
  unscale?: boolean;
  /**
   * RasterIO resampling algorithm. Defaults to `nearest`.
   */
  resampling?: TileTilerTilesZXYScaleXGetResampling;
  /**
   * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
   */
  reproject?: TileTilerTilesZXYScaleXGetReproject;
  /**
   * Buffer on each side of the given tile. It must be a multiple of `0.5`. Output **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257, 1.0 = 258x258).
   */
  buffer?: number | null;
  /**
   * Padding to apply to each tile edge. Helps reduce resampling artefacts along edges. Defaults to `0`.
   */
  padding?: number | null;
  /**
   * Algorithm name
   */
  algorithm?: TileTilerTilesZXYScaleXGetAlgorithm;
  /**
   * Algorithm parameter
   */
  algorithm_params?: string | null;
  /**
   * comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
   */
  rescale?: string[] | null;
  /**
   * rio-color formula (info: https://github.com/mapbox/rio-color)
   */
  color_formula?: string | null;
  /**
   * Colormap name
   */
  colormap_name?: TileTilerTilesZXYScaleXGetColormapName;
  /**
   * JSON encoded custom Colormap
   */
  colormap?: string;
  /**
   * User input colormap type.
   */
  colormap_type?: TileTilerTilesZXYScaleXGetColormapType;
  /**
   * Add mask to the output data. Defaults to `True`
   */
  return_mask?: boolean;
};

export type TileTilerTilesZXYScaleXFormatGetColormapType =
  (typeof TileTilerTilesZXYScaleXFormatGetColormapType)[keyof typeof TileTilerTilesZXYScaleXFormatGetColormapType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesZXYScaleXFormatGetColormapType = {
  explicit: "explicit",
  linear: "linear",
} as const;

export type TileTilerTilesZXYScaleXFormatGetColormapName =
  (typeof TileTilerTilesZXYScaleXFormatGetColormapName)[keyof typeof TileTilerTilesZXYScaleXFormatGetColormapName];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesZXYScaleXFormatGetColormapName = {
  accent: "accent",
  accent_r: "accent_r",
  afmhot: "afmhot",
  afmhot_r: "afmhot_r",
  algae: "algae",
  algae_r: "algae_r",
  amp: "amp",
  amp_r: "amp_r",
  autumn: "autumn",
  autumn_r: "autumn_r",
  balance: "balance",
  balance_r: "balance_r",
  binary: "binary",
  binary_r: "binary_r",
  blues: "blues",
  blues_r: "blues_r",
  bone: "bone",
  bone_r: "bone_r",
  brbg: "brbg",
  brbg_r: "brbg_r",
  brg: "brg",
  brg_r: "brg_r",
  bugn: "bugn",
  bugn_r: "bugn_r",
  bupu: "bupu",
  bupu_r: "bupu_r",
  bwr: "bwr",
  bwr_r: "bwr_r",
  cfastie: "cfastie",
  cividis: "cividis",
  cividis_r: "cividis_r",
  cmrmap: "cmrmap",
  cmrmap_r: "cmrmap_r",
  cool: "cool",
  cool_r: "cool_r",
  coolwarm: "coolwarm",
  coolwarm_r: "coolwarm_r",
  copper: "copper",
  copper_r: "copper_r",
  cubehelix: "cubehelix",
  cubehelix_r: "cubehelix_r",
  curl: "curl",
  curl_r: "curl_r",
  dark2: "dark2",
  dark2_r: "dark2_r",
  deep: "deep",
  deep_r: "deep_r",
  delta: "delta",
  delta_r: "delta_r",
  dense: "dense",
  dense_r: "dense_r",
  diff: "diff",
  diff_r: "diff_r",
  flag: "flag",
  flag_r: "flag_r",
  gist_earth: "gist_earth",
  gist_earth_r: "gist_earth_r",
  gist_gray: "gist_gray",
  gist_gray_r: "gist_gray_r",
  gist_heat: "gist_heat",
  gist_heat_r: "gist_heat_r",
  gist_ncar: "gist_ncar",
  gist_ncar_r: "gist_ncar_r",
  gist_rainbow: "gist_rainbow",
  gist_rainbow_r: "gist_rainbow_r",
  gist_stern: "gist_stern",
  gist_stern_r: "gist_stern_r",
  gist_yarg: "gist_yarg",
  gist_yarg_r: "gist_yarg_r",
  gnbu: "gnbu",
  gnbu_r: "gnbu_r",
  gnuplot: "gnuplot",
  gnuplot2: "gnuplot2",
  gnuplot2_r: "gnuplot2_r",
  gnuplot_r: "gnuplot_r",
  gray: "gray",
  gray_r: "gray_r",
  greens: "greens",
  greens_r: "greens_r",
  greys: "greys",
  greys_r: "greys_r",
  haline: "haline",
  haline_r: "haline_r",
  hot: "hot",
  hot_r: "hot_r",
  hsv: "hsv",
  hsv_r: "hsv_r",
  ice: "ice",
  ice_r: "ice_r",
  inferno: "inferno",
  inferno_r: "inferno_r",
  jet: "jet",
  jet_r: "jet_r",
  magma: "magma",
  magma_r: "magma_r",
  matter: "matter",
  matter_r: "matter_r",
  nipy_spectral: "nipy_spectral",
  nipy_spectral_r: "nipy_spectral_r",
  ocean: "ocean",
  ocean_r: "ocean_r",
  oranges: "oranges",
  oranges_r: "oranges_r",
  orrd: "orrd",
  orrd_r: "orrd_r",
  oxy: "oxy",
  oxy_r: "oxy_r",
  paired: "paired",
  paired_r: "paired_r",
  pastel1: "pastel1",
  pastel1_r: "pastel1_r",
  pastel2: "pastel2",
  pastel2_r: "pastel2_r",
  phase: "phase",
  phase_r: "phase_r",
  pink: "pink",
  pink_r: "pink_r",
  piyg: "piyg",
  piyg_r: "piyg_r",
  plasma: "plasma",
  plasma_r: "plasma_r",
  prgn: "prgn",
  prgn_r: "prgn_r",
  prism: "prism",
  prism_r: "prism_r",
  pubu: "pubu",
  pubu_r: "pubu_r",
  pubugn: "pubugn",
  pubugn_r: "pubugn_r",
  puor: "puor",
  puor_r: "puor_r",
  purd: "purd",
  purd_r: "purd_r",
  purples: "purples",
  purples_r: "purples_r",
  rain: "rain",
  rain_r: "rain_r",
  rainbow: "rainbow",
  rainbow_r: "rainbow_r",
  rdbu: "rdbu",
  rdbu_r: "rdbu_r",
  rdgy: "rdgy",
  rdgy_r: "rdgy_r",
  rdpu: "rdpu",
  rdpu_r: "rdpu_r",
  rdylbu: "rdylbu",
  rdylbu_r: "rdylbu_r",
  rdylgn: "rdylgn",
  rdylgn_r: "rdylgn_r",
  reds: "reds",
  reds_r: "reds_r",
  rplumbo: "rplumbo",
  schwarzwald: "schwarzwald",
  seismic: "seismic",
  seismic_r: "seismic_r",
  set1: "set1",
  set1_r: "set1_r",
  set2: "set2",
  set2_r: "set2_r",
  set3: "set3",
  set3_r: "set3_r",
  solar: "solar",
  solar_r: "solar_r",
  spectral: "spectral",
  spectral_r: "spectral_r",
  speed: "speed",
  speed_r: "speed_r",
  spring: "spring",
  spring_r: "spring_r",
  summer: "summer",
  summer_r: "summer_r",
  tab10: "tab10",
  tab10_r: "tab10_r",
  tab20: "tab20",
  tab20_r: "tab20_r",
  tab20b: "tab20b",
  tab20b_r: "tab20b_r",
  tab20c: "tab20c",
  tab20c_r: "tab20c_r",
  tarn: "tarn",
  tarn_r: "tarn_r",
  tempo: "tempo",
  tempo_r: "tempo_r",
  terrain: "terrain",
  terrain_r: "terrain_r",
  thermal: "thermal",
  thermal_r: "thermal_r",
  topo: "topo",
  topo_r: "topo_r",
  turbid: "turbid",
  turbid_r: "turbid_r",
  turbo: "turbo",
  turbo_r: "turbo_r",
  twilight: "twilight",
  twilight_r: "twilight_r",
  twilight_shifted: "twilight_shifted",
  twilight_shifted_r: "twilight_shifted_r",
  viridis: "viridis",
  viridis_r: "viridis_r",
  winter: "winter",
  winter_r: "winter_r",
  wistia: "wistia",
  wistia_r: "wistia_r",
  ylgn: "ylgn",
  ylgn_r: "ylgn_r",
  ylgnbu: "ylgnbu",
  ylgnbu_r: "ylgnbu_r",
  ylorbr: "ylorbr",
  ylorbr_r: "ylorbr_r",
  ylorrd: "ylorrd",
  ylorrd_r: "ylorrd_r",
} as const;

export type TileTilerTilesZXYScaleXFormatGetAlgorithm =
  (typeof TileTilerTilesZXYScaleXFormatGetAlgorithm)[keyof typeof TileTilerTilesZXYScaleXFormatGetAlgorithm];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesZXYScaleXFormatGetAlgorithm = {
  hillshade: "hillshade",
  contours: "contours",
  normalizedIndex: "normalizedIndex",
  terrarium: "terrarium",
  terrainrgb: "terrainrgb",
} as const;

export type TileTilerTilesZXYScaleXFormatGetReproject =
  (typeof TileTilerTilesZXYScaleXFormatGetReproject)[keyof typeof TileTilerTilesZXYScaleXFormatGetReproject];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesZXYScaleXFormatGetReproject = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  sum: "sum",
  rms: "rms",
} as const;

export type TileTilerTilesZXYScaleXFormatGetResampling =
  (typeof TileTilerTilesZXYScaleXFormatGetResampling)[keyof typeof TileTilerTilesZXYScaleXFormatGetResampling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesZXYScaleXFormatGetResampling = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  gauss: "gauss",
  rms: "rms",
} as const;

export type TileTilerTilesZXYScaleXFormatGetTileMatrixSetId =
  (typeof TileTilerTilesZXYScaleXFormatGetTileMatrixSetId)[keyof typeof TileTilerTilesZXYScaleXFormatGetTileMatrixSetId];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesZXYScaleXFormatGetTileMatrixSetId = {
  CDB1GlobalGrid: "CDB1GlobalGrid",
  CanadianNAD83_LCC: "CanadianNAD83_LCC",
  EuropeanETRS89_LAEAQuad: "EuropeanETRS89_LAEAQuad",
  GNOSISGlobalGrid: "GNOSISGlobalGrid",
  LINZAntarticaMapTilegrid: "LINZAntarticaMapTilegrid",
  NZTM2000Quad: "NZTM2000Quad",
  UPSAntarcticWGS84Quad: "UPSAntarcticWGS84Quad",
  UPSArcticWGS84Quad: "UPSArcticWGS84Quad",
  UTM31WGS84Quad: "UTM31WGS84Quad",
  WGS1984Quad: "WGS1984Quad",
  WebMercatorQuad: "WebMercatorQuad",
  WorldCRS84Quad: "WorldCRS84Quad",
  WorldMercatorWGS84Quad: "WorldMercatorWGS84Quad",
} as const;

export type TileTilerTilesZXYScaleXFormatGetParams = {
  tileMatrixSetId?: TileTilerTilesZXYScaleXFormatGetTileMatrixSetId;
  /**
   * asset name
   */
  asset: string;
  /**
   * Dataset band indexes
   */
  bidx?: number[] | null;
  /**
   * rio-tiler's band math expression
   */
  expression?: string | null;
  /**
   * Overwrite internal Nodata value
   */
  nodata?: string | number | number | null;
  /**
   * Apply internal Scale/Offset. Defaults to `False`.
   */
  unscale?: boolean;
  /**
   * RasterIO resampling algorithm. Defaults to `nearest`.
   */
  resampling?: TileTilerTilesZXYScaleXFormatGetResampling;
  /**
   * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
   */
  reproject?: TileTilerTilesZXYScaleXFormatGetReproject;
  /**
   * Buffer on each side of the given tile. It must be a multiple of `0.5`. Output **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257, 1.0 = 258x258).
   */
  buffer?: number | null;
  /**
   * Padding to apply to each tile edge. Helps reduce resampling artefacts along edges. Defaults to `0`.
   */
  padding?: number | null;
  /**
   * Algorithm name
   */
  algorithm?: TileTilerTilesZXYScaleXFormatGetAlgorithm;
  /**
   * Algorithm parameter
   */
  algorithm_params?: string | null;
  /**
   * comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
   */
  rescale?: string[] | null;
  /**
   * rio-color formula (info: https://github.com/mapbox/rio-color)
   */
  color_formula?: string | null;
  /**
   * Colormap name
   */
  colormap_name?: TileTilerTilesZXYScaleXFormatGetColormapName;
  /**
   * JSON encoded custom Colormap
   */
  colormap?: string;
  /**
   * User input colormap type.
   */
  colormap_type?: TileTilerTilesZXYScaleXFormatGetColormapType;
  /**
   * Add mask to the output data. Defaults to `True`
   */
  return_mask?: boolean;
};

export type TileTilerTilesTileMatrixSetIdZXYGetColormapType =
  (typeof TileTilerTilesTileMatrixSetIdZXYGetColormapType)[keyof typeof TileTilerTilesTileMatrixSetIdZXYGetColormapType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesTileMatrixSetIdZXYGetColormapType = {
  explicit: "explicit",
  linear: "linear",
} as const;

export type TileTilerTilesTileMatrixSetIdZXYGetColormapName =
  (typeof TileTilerTilesTileMatrixSetIdZXYGetColormapName)[keyof typeof TileTilerTilesTileMatrixSetIdZXYGetColormapName];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesTileMatrixSetIdZXYGetColormapName = {
  accent: "accent",
  accent_r: "accent_r",
  afmhot: "afmhot",
  afmhot_r: "afmhot_r",
  algae: "algae",
  algae_r: "algae_r",
  amp: "amp",
  amp_r: "amp_r",
  autumn: "autumn",
  autumn_r: "autumn_r",
  balance: "balance",
  balance_r: "balance_r",
  binary: "binary",
  binary_r: "binary_r",
  blues: "blues",
  blues_r: "blues_r",
  bone: "bone",
  bone_r: "bone_r",
  brbg: "brbg",
  brbg_r: "brbg_r",
  brg: "brg",
  brg_r: "brg_r",
  bugn: "bugn",
  bugn_r: "bugn_r",
  bupu: "bupu",
  bupu_r: "bupu_r",
  bwr: "bwr",
  bwr_r: "bwr_r",
  cfastie: "cfastie",
  cividis: "cividis",
  cividis_r: "cividis_r",
  cmrmap: "cmrmap",
  cmrmap_r: "cmrmap_r",
  cool: "cool",
  cool_r: "cool_r",
  coolwarm: "coolwarm",
  coolwarm_r: "coolwarm_r",
  copper: "copper",
  copper_r: "copper_r",
  cubehelix: "cubehelix",
  cubehelix_r: "cubehelix_r",
  curl: "curl",
  curl_r: "curl_r",
  dark2: "dark2",
  dark2_r: "dark2_r",
  deep: "deep",
  deep_r: "deep_r",
  delta: "delta",
  delta_r: "delta_r",
  dense: "dense",
  dense_r: "dense_r",
  diff: "diff",
  diff_r: "diff_r",
  flag: "flag",
  flag_r: "flag_r",
  gist_earth: "gist_earth",
  gist_earth_r: "gist_earth_r",
  gist_gray: "gist_gray",
  gist_gray_r: "gist_gray_r",
  gist_heat: "gist_heat",
  gist_heat_r: "gist_heat_r",
  gist_ncar: "gist_ncar",
  gist_ncar_r: "gist_ncar_r",
  gist_rainbow: "gist_rainbow",
  gist_rainbow_r: "gist_rainbow_r",
  gist_stern: "gist_stern",
  gist_stern_r: "gist_stern_r",
  gist_yarg: "gist_yarg",
  gist_yarg_r: "gist_yarg_r",
  gnbu: "gnbu",
  gnbu_r: "gnbu_r",
  gnuplot: "gnuplot",
  gnuplot2: "gnuplot2",
  gnuplot2_r: "gnuplot2_r",
  gnuplot_r: "gnuplot_r",
  gray: "gray",
  gray_r: "gray_r",
  greens: "greens",
  greens_r: "greens_r",
  greys: "greys",
  greys_r: "greys_r",
  haline: "haline",
  haline_r: "haline_r",
  hot: "hot",
  hot_r: "hot_r",
  hsv: "hsv",
  hsv_r: "hsv_r",
  ice: "ice",
  ice_r: "ice_r",
  inferno: "inferno",
  inferno_r: "inferno_r",
  jet: "jet",
  jet_r: "jet_r",
  magma: "magma",
  magma_r: "magma_r",
  matter: "matter",
  matter_r: "matter_r",
  nipy_spectral: "nipy_spectral",
  nipy_spectral_r: "nipy_spectral_r",
  ocean: "ocean",
  ocean_r: "ocean_r",
  oranges: "oranges",
  oranges_r: "oranges_r",
  orrd: "orrd",
  orrd_r: "orrd_r",
  oxy: "oxy",
  oxy_r: "oxy_r",
  paired: "paired",
  paired_r: "paired_r",
  pastel1: "pastel1",
  pastel1_r: "pastel1_r",
  pastel2: "pastel2",
  pastel2_r: "pastel2_r",
  phase: "phase",
  phase_r: "phase_r",
  pink: "pink",
  pink_r: "pink_r",
  piyg: "piyg",
  piyg_r: "piyg_r",
  plasma: "plasma",
  plasma_r: "plasma_r",
  prgn: "prgn",
  prgn_r: "prgn_r",
  prism: "prism",
  prism_r: "prism_r",
  pubu: "pubu",
  pubu_r: "pubu_r",
  pubugn: "pubugn",
  pubugn_r: "pubugn_r",
  puor: "puor",
  puor_r: "puor_r",
  purd: "purd",
  purd_r: "purd_r",
  purples: "purples",
  purples_r: "purples_r",
  rain: "rain",
  rain_r: "rain_r",
  rainbow: "rainbow",
  rainbow_r: "rainbow_r",
  rdbu: "rdbu",
  rdbu_r: "rdbu_r",
  rdgy: "rdgy",
  rdgy_r: "rdgy_r",
  rdpu: "rdpu",
  rdpu_r: "rdpu_r",
  rdylbu: "rdylbu",
  rdylbu_r: "rdylbu_r",
  rdylgn: "rdylgn",
  rdylgn_r: "rdylgn_r",
  reds: "reds",
  reds_r: "reds_r",
  rplumbo: "rplumbo",
  schwarzwald: "schwarzwald",
  seismic: "seismic",
  seismic_r: "seismic_r",
  set1: "set1",
  set1_r: "set1_r",
  set2: "set2",
  set2_r: "set2_r",
  set3: "set3",
  set3_r: "set3_r",
  solar: "solar",
  solar_r: "solar_r",
  spectral: "spectral",
  spectral_r: "spectral_r",
  speed: "speed",
  speed_r: "speed_r",
  spring: "spring",
  spring_r: "spring_r",
  summer: "summer",
  summer_r: "summer_r",
  tab10: "tab10",
  tab10_r: "tab10_r",
  tab20: "tab20",
  tab20_r: "tab20_r",
  tab20b: "tab20b",
  tab20b_r: "tab20b_r",
  tab20c: "tab20c",
  tab20c_r: "tab20c_r",
  tarn: "tarn",
  tarn_r: "tarn_r",
  tempo: "tempo",
  tempo_r: "tempo_r",
  terrain: "terrain",
  terrain_r: "terrain_r",
  thermal: "thermal",
  thermal_r: "thermal_r",
  topo: "topo",
  topo_r: "topo_r",
  turbid: "turbid",
  turbid_r: "turbid_r",
  turbo: "turbo",
  turbo_r: "turbo_r",
  twilight: "twilight",
  twilight_r: "twilight_r",
  twilight_shifted: "twilight_shifted",
  twilight_shifted_r: "twilight_shifted_r",
  viridis: "viridis",
  viridis_r: "viridis_r",
  winter: "winter",
  winter_r: "winter_r",
  wistia: "wistia",
  wistia_r: "wistia_r",
  ylgn: "ylgn",
  ylgn_r: "ylgn_r",
  ylgnbu: "ylgnbu",
  ylgnbu_r: "ylgnbu_r",
  ylorbr: "ylorbr",
  ylorbr_r: "ylorbr_r",
  ylorrd: "ylorrd",
  ylorrd_r: "ylorrd_r",
} as const;

export type TileTilerTilesTileMatrixSetIdZXYGetAlgorithm =
  (typeof TileTilerTilesTileMatrixSetIdZXYGetAlgorithm)[keyof typeof TileTilerTilesTileMatrixSetIdZXYGetAlgorithm];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesTileMatrixSetIdZXYGetAlgorithm = {
  hillshade: "hillshade",
  contours: "contours",
  normalizedIndex: "normalizedIndex",
  terrarium: "terrarium",
  terrainrgb: "terrainrgb",
} as const;

export type TileTilerTilesTileMatrixSetIdZXYGetReproject =
  (typeof TileTilerTilesTileMatrixSetIdZXYGetReproject)[keyof typeof TileTilerTilesTileMatrixSetIdZXYGetReproject];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesTileMatrixSetIdZXYGetReproject = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  sum: "sum",
  rms: "rms",
} as const;

export type TileTilerTilesTileMatrixSetIdZXYGetResampling =
  (typeof TileTilerTilesTileMatrixSetIdZXYGetResampling)[keyof typeof TileTilerTilesTileMatrixSetIdZXYGetResampling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesTileMatrixSetIdZXYGetResampling = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  gauss: "gauss",
  rms: "rms",
} as const;

export type TileTilerTilesTileMatrixSetIdZXYGetParams = {
  scale?: number;
  format?: ImageType;
  /**
   * asset name
   */
  asset: string;
  /**
   * Dataset band indexes
   */
  bidx?: number[] | null;
  /**
   * rio-tiler's band math expression
   */
  expression?: string | null;
  /**
   * Overwrite internal Nodata value
   */
  nodata?: string | number | number | null;
  /**
   * Apply internal Scale/Offset. Defaults to `False`.
   */
  unscale?: boolean;
  /**
   * RasterIO resampling algorithm. Defaults to `nearest`.
   */
  resampling?: TileTilerTilesTileMatrixSetIdZXYGetResampling;
  /**
   * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
   */
  reproject?: TileTilerTilesTileMatrixSetIdZXYGetReproject;
  /**
   * Buffer on each side of the given tile. It must be a multiple of `0.5`. Output **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257, 1.0 = 258x258).
   */
  buffer?: number | null;
  /**
   * Padding to apply to each tile edge. Helps reduce resampling artefacts along edges. Defaults to `0`.
   */
  padding?: number | null;
  /**
   * Algorithm name
   */
  algorithm?: TileTilerTilesTileMatrixSetIdZXYGetAlgorithm;
  /**
   * Algorithm parameter
   */
  algorithm_params?: string | null;
  /**
   * comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
   */
  rescale?: string[] | null;
  /**
   * rio-color formula (info: https://github.com/mapbox/rio-color)
   */
  color_formula?: string | null;
  /**
   * Colormap name
   */
  colormap_name?: TileTilerTilesTileMatrixSetIdZXYGetColormapName;
  /**
   * JSON encoded custom Colormap
   */
  colormap?: string;
  /**
   * User input colormap type.
   */
  colormap_type?: TileTilerTilesTileMatrixSetIdZXYGetColormapType;
  /**
   * Add mask to the output data. Defaults to `True`
   */
  return_mask?: boolean;
};

export type TileTilerTilesTileMatrixSetIdZXYFormatGetColormapType =
  (typeof TileTilerTilesTileMatrixSetIdZXYFormatGetColormapType)[keyof typeof TileTilerTilesTileMatrixSetIdZXYFormatGetColormapType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesTileMatrixSetIdZXYFormatGetColormapType = {
  explicit: "explicit",
  linear: "linear",
} as const;

export type TileTilerTilesTileMatrixSetIdZXYFormatGetColormapName =
  (typeof TileTilerTilesTileMatrixSetIdZXYFormatGetColormapName)[keyof typeof TileTilerTilesTileMatrixSetIdZXYFormatGetColormapName];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesTileMatrixSetIdZXYFormatGetColormapName = {
  accent: "accent",
  accent_r: "accent_r",
  afmhot: "afmhot",
  afmhot_r: "afmhot_r",
  algae: "algae",
  algae_r: "algae_r",
  amp: "amp",
  amp_r: "amp_r",
  autumn: "autumn",
  autumn_r: "autumn_r",
  balance: "balance",
  balance_r: "balance_r",
  binary: "binary",
  binary_r: "binary_r",
  blues: "blues",
  blues_r: "blues_r",
  bone: "bone",
  bone_r: "bone_r",
  brbg: "brbg",
  brbg_r: "brbg_r",
  brg: "brg",
  brg_r: "brg_r",
  bugn: "bugn",
  bugn_r: "bugn_r",
  bupu: "bupu",
  bupu_r: "bupu_r",
  bwr: "bwr",
  bwr_r: "bwr_r",
  cfastie: "cfastie",
  cividis: "cividis",
  cividis_r: "cividis_r",
  cmrmap: "cmrmap",
  cmrmap_r: "cmrmap_r",
  cool: "cool",
  cool_r: "cool_r",
  coolwarm: "coolwarm",
  coolwarm_r: "coolwarm_r",
  copper: "copper",
  copper_r: "copper_r",
  cubehelix: "cubehelix",
  cubehelix_r: "cubehelix_r",
  curl: "curl",
  curl_r: "curl_r",
  dark2: "dark2",
  dark2_r: "dark2_r",
  deep: "deep",
  deep_r: "deep_r",
  delta: "delta",
  delta_r: "delta_r",
  dense: "dense",
  dense_r: "dense_r",
  diff: "diff",
  diff_r: "diff_r",
  flag: "flag",
  flag_r: "flag_r",
  gist_earth: "gist_earth",
  gist_earth_r: "gist_earth_r",
  gist_gray: "gist_gray",
  gist_gray_r: "gist_gray_r",
  gist_heat: "gist_heat",
  gist_heat_r: "gist_heat_r",
  gist_ncar: "gist_ncar",
  gist_ncar_r: "gist_ncar_r",
  gist_rainbow: "gist_rainbow",
  gist_rainbow_r: "gist_rainbow_r",
  gist_stern: "gist_stern",
  gist_stern_r: "gist_stern_r",
  gist_yarg: "gist_yarg",
  gist_yarg_r: "gist_yarg_r",
  gnbu: "gnbu",
  gnbu_r: "gnbu_r",
  gnuplot: "gnuplot",
  gnuplot2: "gnuplot2",
  gnuplot2_r: "gnuplot2_r",
  gnuplot_r: "gnuplot_r",
  gray: "gray",
  gray_r: "gray_r",
  greens: "greens",
  greens_r: "greens_r",
  greys: "greys",
  greys_r: "greys_r",
  haline: "haline",
  haline_r: "haline_r",
  hot: "hot",
  hot_r: "hot_r",
  hsv: "hsv",
  hsv_r: "hsv_r",
  ice: "ice",
  ice_r: "ice_r",
  inferno: "inferno",
  inferno_r: "inferno_r",
  jet: "jet",
  jet_r: "jet_r",
  magma: "magma",
  magma_r: "magma_r",
  matter: "matter",
  matter_r: "matter_r",
  nipy_spectral: "nipy_spectral",
  nipy_spectral_r: "nipy_spectral_r",
  ocean: "ocean",
  ocean_r: "ocean_r",
  oranges: "oranges",
  oranges_r: "oranges_r",
  orrd: "orrd",
  orrd_r: "orrd_r",
  oxy: "oxy",
  oxy_r: "oxy_r",
  paired: "paired",
  paired_r: "paired_r",
  pastel1: "pastel1",
  pastel1_r: "pastel1_r",
  pastel2: "pastel2",
  pastel2_r: "pastel2_r",
  phase: "phase",
  phase_r: "phase_r",
  pink: "pink",
  pink_r: "pink_r",
  piyg: "piyg",
  piyg_r: "piyg_r",
  plasma: "plasma",
  plasma_r: "plasma_r",
  prgn: "prgn",
  prgn_r: "prgn_r",
  prism: "prism",
  prism_r: "prism_r",
  pubu: "pubu",
  pubu_r: "pubu_r",
  pubugn: "pubugn",
  pubugn_r: "pubugn_r",
  puor: "puor",
  puor_r: "puor_r",
  purd: "purd",
  purd_r: "purd_r",
  purples: "purples",
  purples_r: "purples_r",
  rain: "rain",
  rain_r: "rain_r",
  rainbow: "rainbow",
  rainbow_r: "rainbow_r",
  rdbu: "rdbu",
  rdbu_r: "rdbu_r",
  rdgy: "rdgy",
  rdgy_r: "rdgy_r",
  rdpu: "rdpu",
  rdpu_r: "rdpu_r",
  rdylbu: "rdylbu",
  rdylbu_r: "rdylbu_r",
  rdylgn: "rdylgn",
  rdylgn_r: "rdylgn_r",
  reds: "reds",
  reds_r: "reds_r",
  rplumbo: "rplumbo",
  schwarzwald: "schwarzwald",
  seismic: "seismic",
  seismic_r: "seismic_r",
  set1: "set1",
  set1_r: "set1_r",
  set2: "set2",
  set2_r: "set2_r",
  set3: "set3",
  set3_r: "set3_r",
  solar: "solar",
  solar_r: "solar_r",
  spectral: "spectral",
  spectral_r: "spectral_r",
  speed: "speed",
  speed_r: "speed_r",
  spring: "spring",
  spring_r: "spring_r",
  summer: "summer",
  summer_r: "summer_r",
  tab10: "tab10",
  tab10_r: "tab10_r",
  tab20: "tab20",
  tab20_r: "tab20_r",
  tab20b: "tab20b",
  tab20b_r: "tab20b_r",
  tab20c: "tab20c",
  tab20c_r: "tab20c_r",
  tarn: "tarn",
  tarn_r: "tarn_r",
  tempo: "tempo",
  tempo_r: "tempo_r",
  terrain: "terrain",
  terrain_r: "terrain_r",
  thermal: "thermal",
  thermal_r: "thermal_r",
  topo: "topo",
  topo_r: "topo_r",
  turbid: "turbid",
  turbid_r: "turbid_r",
  turbo: "turbo",
  turbo_r: "turbo_r",
  twilight: "twilight",
  twilight_r: "twilight_r",
  twilight_shifted: "twilight_shifted",
  twilight_shifted_r: "twilight_shifted_r",
  viridis: "viridis",
  viridis_r: "viridis_r",
  winter: "winter",
  winter_r: "winter_r",
  wistia: "wistia",
  wistia_r: "wistia_r",
  ylgn: "ylgn",
  ylgn_r: "ylgn_r",
  ylgnbu: "ylgnbu",
  ylgnbu_r: "ylgnbu_r",
  ylorbr: "ylorbr",
  ylorbr_r: "ylorbr_r",
  ylorrd: "ylorrd",
  ylorrd_r: "ylorrd_r",
} as const;

export type TileTilerTilesTileMatrixSetIdZXYFormatGetAlgorithm =
  (typeof TileTilerTilesTileMatrixSetIdZXYFormatGetAlgorithm)[keyof typeof TileTilerTilesTileMatrixSetIdZXYFormatGetAlgorithm];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesTileMatrixSetIdZXYFormatGetAlgorithm = {
  hillshade: "hillshade",
  contours: "contours",
  normalizedIndex: "normalizedIndex",
  terrarium: "terrarium",
  terrainrgb: "terrainrgb",
} as const;

export type TileTilerTilesTileMatrixSetIdZXYFormatGetReproject =
  (typeof TileTilerTilesTileMatrixSetIdZXYFormatGetReproject)[keyof typeof TileTilerTilesTileMatrixSetIdZXYFormatGetReproject];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesTileMatrixSetIdZXYFormatGetReproject = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  sum: "sum",
  rms: "rms",
} as const;

export type TileTilerTilesTileMatrixSetIdZXYFormatGetResampling =
  (typeof TileTilerTilesTileMatrixSetIdZXYFormatGetResampling)[keyof typeof TileTilerTilesTileMatrixSetIdZXYFormatGetResampling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesTileMatrixSetIdZXYFormatGetResampling = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  gauss: "gauss",
  rms: "rms",
} as const;

export type TileTilerTilesTileMatrixSetIdZXYFormatGetParams = {
  scale?: number;
  /**
   * asset name
   */
  asset: string;
  /**
   * Dataset band indexes
   */
  bidx?: number[] | null;
  /**
   * rio-tiler's band math expression
   */
  expression?: string | null;
  /**
   * Overwrite internal Nodata value
   */
  nodata?: string | number | number | null;
  /**
   * Apply internal Scale/Offset. Defaults to `False`.
   */
  unscale?: boolean;
  /**
   * RasterIO resampling algorithm. Defaults to `nearest`.
   */
  resampling?: TileTilerTilesTileMatrixSetIdZXYFormatGetResampling;
  /**
   * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
   */
  reproject?: TileTilerTilesTileMatrixSetIdZXYFormatGetReproject;
  /**
   * Buffer on each side of the given tile. It must be a multiple of `0.5`. Output **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257, 1.0 = 258x258).
   */
  buffer?: number | null;
  /**
   * Padding to apply to each tile edge. Helps reduce resampling artefacts along edges. Defaults to `0`.
   */
  padding?: number | null;
  /**
   * Algorithm name
   */
  algorithm?: TileTilerTilesTileMatrixSetIdZXYFormatGetAlgorithm;
  /**
   * Algorithm parameter
   */
  algorithm_params?: string | null;
  /**
   * comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
   */
  rescale?: string[] | null;
  /**
   * rio-color formula (info: https://github.com/mapbox/rio-color)
   */
  color_formula?: string | null;
  /**
   * Colormap name
   */
  colormap_name?: TileTilerTilesTileMatrixSetIdZXYFormatGetColormapName;
  /**
   * JSON encoded custom Colormap
   */
  colormap?: string;
  /**
   * User input colormap type.
   */
  colormap_type?: TileTilerTilesTileMatrixSetIdZXYFormatGetColormapType;
  /**
   * Add mask to the output data. Defaults to `True`
   */
  return_mask?: boolean;
};

export type TileTilerTilesTileMatrixSetIdZXYScaleXGetColormapType =
  (typeof TileTilerTilesTileMatrixSetIdZXYScaleXGetColormapType)[keyof typeof TileTilerTilesTileMatrixSetIdZXYScaleXGetColormapType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesTileMatrixSetIdZXYScaleXGetColormapType = {
  explicit: "explicit",
  linear: "linear",
} as const;

export type TileTilerTilesTileMatrixSetIdZXYScaleXGetColormapName =
  (typeof TileTilerTilesTileMatrixSetIdZXYScaleXGetColormapName)[keyof typeof TileTilerTilesTileMatrixSetIdZXYScaleXGetColormapName];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesTileMatrixSetIdZXYScaleXGetColormapName = {
  accent: "accent",
  accent_r: "accent_r",
  afmhot: "afmhot",
  afmhot_r: "afmhot_r",
  algae: "algae",
  algae_r: "algae_r",
  amp: "amp",
  amp_r: "amp_r",
  autumn: "autumn",
  autumn_r: "autumn_r",
  balance: "balance",
  balance_r: "balance_r",
  binary: "binary",
  binary_r: "binary_r",
  blues: "blues",
  blues_r: "blues_r",
  bone: "bone",
  bone_r: "bone_r",
  brbg: "brbg",
  brbg_r: "brbg_r",
  brg: "brg",
  brg_r: "brg_r",
  bugn: "bugn",
  bugn_r: "bugn_r",
  bupu: "bupu",
  bupu_r: "bupu_r",
  bwr: "bwr",
  bwr_r: "bwr_r",
  cfastie: "cfastie",
  cividis: "cividis",
  cividis_r: "cividis_r",
  cmrmap: "cmrmap",
  cmrmap_r: "cmrmap_r",
  cool: "cool",
  cool_r: "cool_r",
  coolwarm: "coolwarm",
  coolwarm_r: "coolwarm_r",
  copper: "copper",
  copper_r: "copper_r",
  cubehelix: "cubehelix",
  cubehelix_r: "cubehelix_r",
  curl: "curl",
  curl_r: "curl_r",
  dark2: "dark2",
  dark2_r: "dark2_r",
  deep: "deep",
  deep_r: "deep_r",
  delta: "delta",
  delta_r: "delta_r",
  dense: "dense",
  dense_r: "dense_r",
  diff: "diff",
  diff_r: "diff_r",
  flag: "flag",
  flag_r: "flag_r",
  gist_earth: "gist_earth",
  gist_earth_r: "gist_earth_r",
  gist_gray: "gist_gray",
  gist_gray_r: "gist_gray_r",
  gist_heat: "gist_heat",
  gist_heat_r: "gist_heat_r",
  gist_ncar: "gist_ncar",
  gist_ncar_r: "gist_ncar_r",
  gist_rainbow: "gist_rainbow",
  gist_rainbow_r: "gist_rainbow_r",
  gist_stern: "gist_stern",
  gist_stern_r: "gist_stern_r",
  gist_yarg: "gist_yarg",
  gist_yarg_r: "gist_yarg_r",
  gnbu: "gnbu",
  gnbu_r: "gnbu_r",
  gnuplot: "gnuplot",
  gnuplot2: "gnuplot2",
  gnuplot2_r: "gnuplot2_r",
  gnuplot_r: "gnuplot_r",
  gray: "gray",
  gray_r: "gray_r",
  greens: "greens",
  greens_r: "greens_r",
  greys: "greys",
  greys_r: "greys_r",
  haline: "haline",
  haline_r: "haline_r",
  hot: "hot",
  hot_r: "hot_r",
  hsv: "hsv",
  hsv_r: "hsv_r",
  ice: "ice",
  ice_r: "ice_r",
  inferno: "inferno",
  inferno_r: "inferno_r",
  jet: "jet",
  jet_r: "jet_r",
  magma: "magma",
  magma_r: "magma_r",
  matter: "matter",
  matter_r: "matter_r",
  nipy_spectral: "nipy_spectral",
  nipy_spectral_r: "nipy_spectral_r",
  ocean: "ocean",
  ocean_r: "ocean_r",
  oranges: "oranges",
  oranges_r: "oranges_r",
  orrd: "orrd",
  orrd_r: "orrd_r",
  oxy: "oxy",
  oxy_r: "oxy_r",
  paired: "paired",
  paired_r: "paired_r",
  pastel1: "pastel1",
  pastel1_r: "pastel1_r",
  pastel2: "pastel2",
  pastel2_r: "pastel2_r",
  phase: "phase",
  phase_r: "phase_r",
  pink: "pink",
  pink_r: "pink_r",
  piyg: "piyg",
  piyg_r: "piyg_r",
  plasma: "plasma",
  plasma_r: "plasma_r",
  prgn: "prgn",
  prgn_r: "prgn_r",
  prism: "prism",
  prism_r: "prism_r",
  pubu: "pubu",
  pubu_r: "pubu_r",
  pubugn: "pubugn",
  pubugn_r: "pubugn_r",
  puor: "puor",
  puor_r: "puor_r",
  purd: "purd",
  purd_r: "purd_r",
  purples: "purples",
  purples_r: "purples_r",
  rain: "rain",
  rain_r: "rain_r",
  rainbow: "rainbow",
  rainbow_r: "rainbow_r",
  rdbu: "rdbu",
  rdbu_r: "rdbu_r",
  rdgy: "rdgy",
  rdgy_r: "rdgy_r",
  rdpu: "rdpu",
  rdpu_r: "rdpu_r",
  rdylbu: "rdylbu",
  rdylbu_r: "rdylbu_r",
  rdylgn: "rdylgn",
  rdylgn_r: "rdylgn_r",
  reds: "reds",
  reds_r: "reds_r",
  rplumbo: "rplumbo",
  schwarzwald: "schwarzwald",
  seismic: "seismic",
  seismic_r: "seismic_r",
  set1: "set1",
  set1_r: "set1_r",
  set2: "set2",
  set2_r: "set2_r",
  set3: "set3",
  set3_r: "set3_r",
  solar: "solar",
  solar_r: "solar_r",
  spectral: "spectral",
  spectral_r: "spectral_r",
  speed: "speed",
  speed_r: "speed_r",
  spring: "spring",
  spring_r: "spring_r",
  summer: "summer",
  summer_r: "summer_r",
  tab10: "tab10",
  tab10_r: "tab10_r",
  tab20: "tab20",
  tab20_r: "tab20_r",
  tab20b: "tab20b",
  tab20b_r: "tab20b_r",
  tab20c: "tab20c",
  tab20c_r: "tab20c_r",
  tarn: "tarn",
  tarn_r: "tarn_r",
  tempo: "tempo",
  tempo_r: "tempo_r",
  terrain: "terrain",
  terrain_r: "terrain_r",
  thermal: "thermal",
  thermal_r: "thermal_r",
  topo: "topo",
  topo_r: "topo_r",
  turbid: "turbid",
  turbid_r: "turbid_r",
  turbo: "turbo",
  turbo_r: "turbo_r",
  twilight: "twilight",
  twilight_r: "twilight_r",
  twilight_shifted: "twilight_shifted",
  twilight_shifted_r: "twilight_shifted_r",
  viridis: "viridis",
  viridis_r: "viridis_r",
  winter: "winter",
  winter_r: "winter_r",
  wistia: "wistia",
  wistia_r: "wistia_r",
  ylgn: "ylgn",
  ylgn_r: "ylgn_r",
  ylgnbu: "ylgnbu",
  ylgnbu_r: "ylgnbu_r",
  ylorbr: "ylorbr",
  ylorbr_r: "ylorbr_r",
  ylorrd: "ylorrd",
  ylorrd_r: "ylorrd_r",
} as const;

export type TileTilerTilesTileMatrixSetIdZXYScaleXGetAlgorithm =
  (typeof TileTilerTilesTileMatrixSetIdZXYScaleXGetAlgorithm)[keyof typeof TileTilerTilesTileMatrixSetIdZXYScaleXGetAlgorithm];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesTileMatrixSetIdZXYScaleXGetAlgorithm = {
  hillshade: "hillshade",
  contours: "contours",
  normalizedIndex: "normalizedIndex",
  terrarium: "terrarium",
  terrainrgb: "terrainrgb",
} as const;

export type TileTilerTilesTileMatrixSetIdZXYScaleXGetReproject =
  (typeof TileTilerTilesTileMatrixSetIdZXYScaleXGetReproject)[keyof typeof TileTilerTilesTileMatrixSetIdZXYScaleXGetReproject];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesTileMatrixSetIdZXYScaleXGetReproject = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  sum: "sum",
  rms: "rms",
} as const;

export type TileTilerTilesTileMatrixSetIdZXYScaleXGetResampling =
  (typeof TileTilerTilesTileMatrixSetIdZXYScaleXGetResampling)[keyof typeof TileTilerTilesTileMatrixSetIdZXYScaleXGetResampling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesTileMatrixSetIdZXYScaleXGetResampling = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  gauss: "gauss",
  rms: "rms",
} as const;

export type TileTilerTilesTileMatrixSetIdZXYScaleXGetParams = {
  format?: ImageType;
  /**
   * asset name
   */
  asset: string;
  /**
   * Dataset band indexes
   */
  bidx?: number[] | null;
  /**
   * rio-tiler's band math expression
   */
  expression?: string | null;
  /**
   * Overwrite internal Nodata value
   */
  nodata?: string | number | number | null;
  /**
   * Apply internal Scale/Offset. Defaults to `False`.
   */
  unscale?: boolean;
  /**
   * RasterIO resampling algorithm. Defaults to `nearest`.
   */
  resampling?: TileTilerTilesTileMatrixSetIdZXYScaleXGetResampling;
  /**
   * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
   */
  reproject?: TileTilerTilesTileMatrixSetIdZXYScaleXGetReproject;
  /**
   * Buffer on each side of the given tile. It must be a multiple of `0.5`. Output **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257, 1.0 = 258x258).
   */
  buffer?: number | null;
  /**
   * Padding to apply to each tile edge. Helps reduce resampling artefacts along edges. Defaults to `0`.
   */
  padding?: number | null;
  /**
   * Algorithm name
   */
  algorithm?: TileTilerTilesTileMatrixSetIdZXYScaleXGetAlgorithm;
  /**
   * Algorithm parameter
   */
  algorithm_params?: string | null;
  /**
   * comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
   */
  rescale?: string[] | null;
  /**
   * rio-color formula (info: https://github.com/mapbox/rio-color)
   */
  color_formula?: string | null;
  /**
   * Colormap name
   */
  colormap_name?: TileTilerTilesTileMatrixSetIdZXYScaleXGetColormapName;
  /**
   * JSON encoded custom Colormap
   */
  colormap?: string;
  /**
   * User input colormap type.
   */
  colormap_type?: TileTilerTilesTileMatrixSetIdZXYScaleXGetColormapType;
  /**
   * Add mask to the output data. Defaults to `True`
   */
  return_mask?: boolean;
};

export type TileTilerTilesTileMatrixSetIdZXYScaleXFormatGetColormapType =
  (typeof TileTilerTilesTileMatrixSetIdZXYScaleXFormatGetColormapType)[keyof typeof TileTilerTilesTileMatrixSetIdZXYScaleXFormatGetColormapType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesTileMatrixSetIdZXYScaleXFormatGetColormapType = {
  explicit: "explicit",
  linear: "linear",
} as const;

export type TileTilerTilesTileMatrixSetIdZXYScaleXFormatGetColormapName =
  (typeof TileTilerTilesTileMatrixSetIdZXYScaleXFormatGetColormapName)[keyof typeof TileTilerTilesTileMatrixSetIdZXYScaleXFormatGetColormapName];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesTileMatrixSetIdZXYScaleXFormatGetColormapName = {
  accent: "accent",
  accent_r: "accent_r",
  afmhot: "afmhot",
  afmhot_r: "afmhot_r",
  algae: "algae",
  algae_r: "algae_r",
  amp: "amp",
  amp_r: "amp_r",
  autumn: "autumn",
  autumn_r: "autumn_r",
  balance: "balance",
  balance_r: "balance_r",
  binary: "binary",
  binary_r: "binary_r",
  blues: "blues",
  blues_r: "blues_r",
  bone: "bone",
  bone_r: "bone_r",
  brbg: "brbg",
  brbg_r: "brbg_r",
  brg: "brg",
  brg_r: "brg_r",
  bugn: "bugn",
  bugn_r: "bugn_r",
  bupu: "bupu",
  bupu_r: "bupu_r",
  bwr: "bwr",
  bwr_r: "bwr_r",
  cfastie: "cfastie",
  cividis: "cividis",
  cividis_r: "cividis_r",
  cmrmap: "cmrmap",
  cmrmap_r: "cmrmap_r",
  cool: "cool",
  cool_r: "cool_r",
  coolwarm: "coolwarm",
  coolwarm_r: "coolwarm_r",
  copper: "copper",
  copper_r: "copper_r",
  cubehelix: "cubehelix",
  cubehelix_r: "cubehelix_r",
  curl: "curl",
  curl_r: "curl_r",
  dark2: "dark2",
  dark2_r: "dark2_r",
  deep: "deep",
  deep_r: "deep_r",
  delta: "delta",
  delta_r: "delta_r",
  dense: "dense",
  dense_r: "dense_r",
  diff: "diff",
  diff_r: "diff_r",
  flag: "flag",
  flag_r: "flag_r",
  gist_earth: "gist_earth",
  gist_earth_r: "gist_earth_r",
  gist_gray: "gist_gray",
  gist_gray_r: "gist_gray_r",
  gist_heat: "gist_heat",
  gist_heat_r: "gist_heat_r",
  gist_ncar: "gist_ncar",
  gist_ncar_r: "gist_ncar_r",
  gist_rainbow: "gist_rainbow",
  gist_rainbow_r: "gist_rainbow_r",
  gist_stern: "gist_stern",
  gist_stern_r: "gist_stern_r",
  gist_yarg: "gist_yarg",
  gist_yarg_r: "gist_yarg_r",
  gnbu: "gnbu",
  gnbu_r: "gnbu_r",
  gnuplot: "gnuplot",
  gnuplot2: "gnuplot2",
  gnuplot2_r: "gnuplot2_r",
  gnuplot_r: "gnuplot_r",
  gray: "gray",
  gray_r: "gray_r",
  greens: "greens",
  greens_r: "greens_r",
  greys: "greys",
  greys_r: "greys_r",
  haline: "haline",
  haline_r: "haline_r",
  hot: "hot",
  hot_r: "hot_r",
  hsv: "hsv",
  hsv_r: "hsv_r",
  ice: "ice",
  ice_r: "ice_r",
  inferno: "inferno",
  inferno_r: "inferno_r",
  jet: "jet",
  jet_r: "jet_r",
  magma: "magma",
  magma_r: "magma_r",
  matter: "matter",
  matter_r: "matter_r",
  nipy_spectral: "nipy_spectral",
  nipy_spectral_r: "nipy_spectral_r",
  ocean: "ocean",
  ocean_r: "ocean_r",
  oranges: "oranges",
  oranges_r: "oranges_r",
  orrd: "orrd",
  orrd_r: "orrd_r",
  oxy: "oxy",
  oxy_r: "oxy_r",
  paired: "paired",
  paired_r: "paired_r",
  pastel1: "pastel1",
  pastel1_r: "pastel1_r",
  pastel2: "pastel2",
  pastel2_r: "pastel2_r",
  phase: "phase",
  phase_r: "phase_r",
  pink: "pink",
  pink_r: "pink_r",
  piyg: "piyg",
  piyg_r: "piyg_r",
  plasma: "plasma",
  plasma_r: "plasma_r",
  prgn: "prgn",
  prgn_r: "prgn_r",
  prism: "prism",
  prism_r: "prism_r",
  pubu: "pubu",
  pubu_r: "pubu_r",
  pubugn: "pubugn",
  pubugn_r: "pubugn_r",
  puor: "puor",
  puor_r: "puor_r",
  purd: "purd",
  purd_r: "purd_r",
  purples: "purples",
  purples_r: "purples_r",
  rain: "rain",
  rain_r: "rain_r",
  rainbow: "rainbow",
  rainbow_r: "rainbow_r",
  rdbu: "rdbu",
  rdbu_r: "rdbu_r",
  rdgy: "rdgy",
  rdgy_r: "rdgy_r",
  rdpu: "rdpu",
  rdpu_r: "rdpu_r",
  rdylbu: "rdylbu",
  rdylbu_r: "rdylbu_r",
  rdylgn: "rdylgn",
  rdylgn_r: "rdylgn_r",
  reds: "reds",
  reds_r: "reds_r",
  rplumbo: "rplumbo",
  schwarzwald: "schwarzwald",
  seismic: "seismic",
  seismic_r: "seismic_r",
  set1: "set1",
  set1_r: "set1_r",
  set2: "set2",
  set2_r: "set2_r",
  set3: "set3",
  set3_r: "set3_r",
  solar: "solar",
  solar_r: "solar_r",
  spectral: "spectral",
  spectral_r: "spectral_r",
  speed: "speed",
  speed_r: "speed_r",
  spring: "spring",
  spring_r: "spring_r",
  summer: "summer",
  summer_r: "summer_r",
  tab10: "tab10",
  tab10_r: "tab10_r",
  tab20: "tab20",
  tab20_r: "tab20_r",
  tab20b: "tab20b",
  tab20b_r: "tab20b_r",
  tab20c: "tab20c",
  tab20c_r: "tab20c_r",
  tarn: "tarn",
  tarn_r: "tarn_r",
  tempo: "tempo",
  tempo_r: "tempo_r",
  terrain: "terrain",
  terrain_r: "terrain_r",
  thermal: "thermal",
  thermal_r: "thermal_r",
  topo: "topo",
  topo_r: "topo_r",
  turbid: "turbid",
  turbid_r: "turbid_r",
  turbo: "turbo",
  turbo_r: "turbo_r",
  twilight: "twilight",
  twilight_r: "twilight_r",
  twilight_shifted: "twilight_shifted",
  twilight_shifted_r: "twilight_shifted_r",
  viridis: "viridis",
  viridis_r: "viridis_r",
  winter: "winter",
  winter_r: "winter_r",
  wistia: "wistia",
  wistia_r: "wistia_r",
  ylgn: "ylgn",
  ylgn_r: "ylgn_r",
  ylgnbu: "ylgnbu",
  ylgnbu_r: "ylgnbu_r",
  ylorbr: "ylorbr",
  ylorbr_r: "ylorbr_r",
  ylorrd: "ylorrd",
  ylorrd_r: "ylorrd_r",
} as const;

export type TileTilerTilesTileMatrixSetIdZXYScaleXFormatGetAlgorithm =
  (typeof TileTilerTilesTileMatrixSetIdZXYScaleXFormatGetAlgorithm)[keyof typeof TileTilerTilesTileMatrixSetIdZXYScaleXFormatGetAlgorithm];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesTileMatrixSetIdZXYScaleXFormatGetAlgorithm = {
  hillshade: "hillshade",
  contours: "contours",
  normalizedIndex: "normalizedIndex",
  terrarium: "terrarium",
  terrainrgb: "terrainrgb",
} as const;

export type TileTilerTilesTileMatrixSetIdZXYScaleXFormatGetReproject =
  (typeof TileTilerTilesTileMatrixSetIdZXYScaleXFormatGetReproject)[keyof typeof TileTilerTilesTileMatrixSetIdZXYScaleXFormatGetReproject];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesTileMatrixSetIdZXYScaleXFormatGetReproject = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  sum: "sum",
  rms: "rms",
} as const;

export type TileTilerTilesTileMatrixSetIdZXYScaleXFormatGetResampling =
  (typeof TileTilerTilesTileMatrixSetIdZXYScaleXFormatGetResampling)[keyof typeof TileTilerTilesTileMatrixSetIdZXYScaleXFormatGetResampling];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TileTilerTilesTileMatrixSetIdZXYScaleXFormatGetResampling = {
  nearest: "nearest",
  bilinear: "bilinear",
  cubic: "cubic",
  cubic_spline: "cubic_spline",
  lanczos: "lanczos",
  average: "average",
  mode: "mode",
  gauss: "gauss",
  rms: "rms",
} as const;

export type TileTilerTilesTileMatrixSetIdZXYScaleXFormatGetParams = {
  /**
   * asset name
   */
  asset: string;
  /**
   * Dataset band indexes
   */
  bidx?: number[] | null;
  /**
   * rio-tiler's band math expression
   */
  expression?: string | null;
  /**
   * Overwrite internal Nodata value
   */
  nodata?: string | number | number | null;
  /**
   * Apply internal Scale/Offset. Defaults to `False`.
   */
  unscale?: boolean;
  /**
   * RasterIO resampling algorithm. Defaults to `nearest`.
   */
  resampling?: TileTilerTilesTileMatrixSetIdZXYScaleXFormatGetResampling;
  /**
   * WarpKernel resampling algorithm (only used when doing re-projection). Defaults to `nearest`.
   */
  reproject?: TileTilerTilesTileMatrixSetIdZXYScaleXFormatGetReproject;
  /**
   * Buffer on each side of the given tile. It must be a multiple of `0.5`. Output **tilesize** will be expanded to `tilesize + 2 * buffer` (e.g 0.5 = 257x257, 1.0 = 258x258).
   */
  buffer?: number | null;
  /**
   * Padding to apply to each tile edge. Helps reduce resampling artefacts along edges. Defaults to `0`.
   */
  padding?: number | null;
  /**
   * Algorithm name
   */
  algorithm?: TileTilerTilesTileMatrixSetIdZXYScaleXFormatGetAlgorithm;
  /**
   * Algorithm parameter
   */
  algorithm_params?: string | null;
  /**
   * comma (',') delimited Min,Max range. Can set multiple time for multiple bands.
   */
  rescale?: string[] | null;
  /**
   * rio-color formula (info: https://github.com/mapbox/rio-color)
   */
  color_formula?: string | null;
  /**
   * Colormap name
   */
  colormap_name?: TileTilerTilesTileMatrixSetIdZXYScaleXFormatGetColormapName;
  /**
   * JSON encoded custom Colormap
   */
  colormap?: string;
  /**
   * User input colormap type.
   */
  colormap_type?: TileTilerTilesTileMatrixSetIdZXYScaleXFormatGetColormapType;
  /**
   * Add mask to the output data. Defaults to `True`
   */
  return_mask?: boolean;
};

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

/**
 * Point model.

response model for `/point` endpoints
 */
export interface Point {
  band_names: string[];
  coordinates: number[];
  values: number[];
}

/**
 * Available Output image type.
 */
export type ImageType = (typeof ImageType)[keyof typeof ImageType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImageType = {
  png: "png",
  npy: "npy",
  tif: "tif",
  jpeg: "jpeg",
  jpg: "jpg",
  jp2: "jp2",
  webp: "webp",
  pngraw: "pngraw",
} as const;

export interface HTTPValidationError {
  detail?: ValidationError[];
}
